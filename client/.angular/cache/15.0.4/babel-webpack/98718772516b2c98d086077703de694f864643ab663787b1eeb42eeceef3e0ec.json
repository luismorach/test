{"ast":null,"code":"var NuevoUsuarioComponent_1;\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { DinamicInput } from 'src/app/utils/DinamicInput';\nlet NuevoUsuarioComponent = NuevoUsuarioComponent_1 = class NuevoUsuarioComponent extends DinamicInput {\n  constructor(fb, routes, comunicatorSvc) {\n    super();\n    this.fb = fb;\n    this.routes = routes;\n    this.comunicatorSvc = comunicatorSvc;\n  }\n  ngOnInit() {\n    let title = [];\n    let ruta;\n    setTimeout(() => {\n      /* Obtengo la ruta actual y la transformo para obtener el titulo del componente*/\n      ruta = this.routes.url.slice(this.routes.url.slice(1).indexOf('/') + 2);\n      title.push(decodeURI(ruta).toUpperCase()); //a単ado el titulo al array\n      title.push(ruta.indexOf(\"nuevo\") ? \"fas fa-user-cog fa-fw\" : \"fa fa-user-tie fa-fw\"); //aa単ado el icono del titulo al array\n      this.comunicatorSvc.setTitleComponent(title);\n    });\n    this.formNewUser = this.fb.group({\n      documentNumber: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      namesUser: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]),\n      lastNamesUser: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]),\n      phoneNumber: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      email: new FormControl('', [Validators.pattern(/^[a-zA-Z ]+$/)]),\n      password: new FormControl('', [Validators.required]),\n      repeatPassword: new FormControl('', Validators.required)\n    }, NuevoUsuarioComponent_1.mustMatch('password', 'repeatPassword') // insert here\n    );\n  }\n\n  submit() {\n    if (this.formNewUser.valid) console.log(\"registrd\");\n  }\n  clean() {\n    this.formNewUser.get('documentNumber')?.setValue('');\n    this.formNewUser.get('namesUser')?.setValue('');\n    this.formNewUser.get('lastNamesUser')?.setValue('');\n    this.formNewUser.get('phoneNumber')?.setValue('');\n    this.formNewUser.get('email')?.setValue('');\n    this.formNewUser.get('password')?.setValue('');\n    this.formNewUser.get('repeatPassword')?.setValue('');\n  }\n  static onlyChar() {\n    return control => {\n      if (control.value == '') return null;\n      let re = new RegExp('^[a-zA-Z ]*$');\n      if (re.test(control.value)) {\n        return null;\n      } else {\n        return {\n          onlyChar: true\n        };\n      }\n    };\n  }\n  static mustMatch(controlName, matchingControlName) {\n    return formGroup => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n      if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\n        return;\n      }\n      // set error on matchingControl if validation fails\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({\n          mustMatch: true\n        });\n      } else {\n        matchingControl.setErrors(null);\n      }\n      return null;\n    };\n  }\n};\nNuevoUsuarioComponent = NuevoUsuarioComponent_1 = __decorate([Component({\n  selector: 'app-nuevo-usuario',\n  templateUrl: './nuevo-usuario.component.html',\n  styleUrls: ['./nuevo-usuario.component.css']\n})], NuevoUsuarioComponent);\nexport { NuevoUsuarioComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","DinamicInput","NuevoUsuarioComponent","constructor","fb","routes","comunicatorSvc","ngOnInit","title","ruta","setTimeout","url","slice","indexOf","push","decodeURI","toUpperCase","setTitleComponent","formNewUser","group","documentNumber","required","pattern","namesUser","lastNamesUser","phoneNumber","email","password","repeatPassword","NuevoUsuarioComponent_1","mustMatch","submit","valid","console","log","clean","get","setValue","onlyChar","control","value","re","RegExp","test","controlName","matchingControlName","formGroup","controls","matchingControl","errors","setErrors","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/app/src/app/content/administracion/usuarios/nuevo-usuario/nuevo-usuario.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ComunicatorComponetsService } from 'src/app/services/comunicator/comunicator-componets.service';\nimport { DinamicInput } from 'src/app/utils/DinamicInput';\n\n@Component({\n  selector: 'app-nuevo-usuario',\n  templateUrl: './nuevo-usuario.component.html',\n  styleUrls: ['./nuevo-usuario.component.css']\n})\nexport class NuevoUsuarioComponent extends DinamicInput {\n  formNewUser!: FormGroup;\n\n  constructor(private fb: FormBuilder, private routes: Router,\n    private comunicatorSvc: ComunicatorComponetsService) {\n    super();\n  }\n\n  ngOnInit() {\n    let title: string[] = [];\n    let ruta;\n    setTimeout(() => {\n      /* Obtengo la ruta actual y la transformo para obtener el titulo del componente*/\n      ruta = this.routes.url.slice((this.routes.url.slice(1).indexOf('/')) + 2);\n      title.push(decodeURI(ruta).toUpperCase());//a単ado el titulo al array\n      title.push((ruta.indexOf(\"nuevo\")) ? \"fas fa-user-cog fa-fw\" : \"fa fa-user-tie fa-fw\");//aa単ado el icono del titulo al array\n      this.comunicatorSvc.setTitleComponent(title);\n    });\n    this.formNewUser = this.fb.group({\n      documentNumber: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      namesUser: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]),\n      lastNamesUser: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]),\n      phoneNumber: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      email: new FormControl('', [Validators.pattern(/^[a-zA-Z ]+$/)]),\n      password: new FormControl('', [Validators.required]),\n      repeatPassword: new FormControl('', Validators.required),\n    },\n    NuevoUsuarioComponent.mustMatch('password', 'repeatPassword') // insert here\n    )\n  }\n  submit() {\n    if (this.formNewUser.valid)\n      console.log(\"registrd\")\n  }\n  clean() {\n    this.formNewUser.get('documentNumber')?.setValue('');\n    this.formNewUser.get('namesUser')?.setValue('');\n    this.formNewUser.get('lastNamesUser')?.setValue('');\n    this.formNewUser.get('phoneNumber')?.setValue('');\n    this.formNewUser.get('email')?.setValue('');\n    this.formNewUser.get('password')?.setValue('');\n    this.formNewUser.get('repeatPassword')?.setValue('');\n  }\n\n  static onlyChar(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (control.value == '') return null;\n\n      let re = new RegExp('^[a-zA-Z ]*$');\n      if (re.test(control.value)) {\n        return null;\n      } else {\n        return { onlyChar: true };\n      }\n    };\n  }\n  static mustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n\n      if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\n        return;\n      }\n\n      // set error on matchingControl if validation fails\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n      return null;\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}