{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { DinamicInput } from 'src/app/utils/DinamicInput';\nlet NuevaCajaComponent = class NuevaCajaComponent extends DinamicInput {\n  constructor(fb, comunicatorSvc$, routes, route) {\n    super();\n    this.fb = fb;\n    this.comunicatorSvc$ = comunicatorSvc$;\n    this.routes = routes;\n    this.route = route;\n    this.usedClass = [];\n    this.registerToUpdate = [];\n    this.usedClass[0] = \"input-on-focus\";\n    this.ruta = this.routes.url.slice(this.routes.url.slice(1).indexOf('/') + 2);\n    this.title = [];\n    if (this.ruta.indexOf(\"actualizar\")) {\n      this.title.push(\"fa-solid fa-cash-register fa-fw\"); //aa単ado el icono del titulo al array\n    } else {\n      this.ruta = this.routes.url.slice(this.routes.url.slice(1).indexOf('/') + 2, this.routes.url.lastIndexOf('/'));\n      this.title.push(\"fa fa-arrows-rotate\");\n    }\n    this.title.push(decodeURI(this.ruta).toUpperCase()); //a単ado el titulo al array\n    this.comunicatorSvc$.setTitleComponent(this.title);\n  }\n  ngOnInit() {\n    this.newRegister = this.fb.group({\n      name: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]+$/)]),\n      state: new FormControl('Habilitada')\n    });\n    if (this.ruta.includes(\"actualizar\")) {\n      this.route.paramMap.subscribe(params => {\n        this.id_register = params.get('id_register');\n        this.comunicatorSvc$.getRegister(Number(this.id_register)).subscribe(res => {\n          let other = res;\n          this.newRegister.get('name')?.setValue(res[0].name);\n          this.newRegister.get('state')?.setValue(res[0].state);\n        });\n      });\n    }\n  }\n  submit() {\n    if (this.newRegister.valid) {\n      this.comunicatorSvc$.setRegister(this.newRegister.value).subscribe(res => console.log(res));\n    }\n  }\n  clean() {\n    this.newRegister.get('name')?.setValue('');\n    console.log(this.popUp?.nativeElement);\n    this.popUp?.nativeElement.showModal();\n  }\n  update() {\n    this.comunicatorSvc$.updateRegister(Number(this.id_register), this.newRegister.value).subscribe(res => console.log(res));\n    this.redirectToListRegister();\n  }\n  redirectToListRegister() {\n    this.routes.navigate(['/administracion/lista cajas']);\n  }\n};\n__decorate([ViewChild('popup', {\n  static: false\n})], NuevaCajaComponent.prototype, \"popUp\", void 0);\nNuevaCajaComponent = __decorate([Component({\n  selector: 'app-nueva-caja',\n  templateUrl: './nueva-caja.component.html',\n  styleUrls: ['./nueva-caja.component.css']\n})], NuevaCajaComponent);\nexport { NuevaCajaComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormControl","Validators","DinamicInput","NuevaCajaComponent","constructor","fb","comunicatorSvc$","routes","route","usedClass","ruta","url","slice","indexOf","title","push","lastIndexOf","decodeURI","toUpperCase","setTitleComponent","ngOnInit","newRegister","group","name","required","pattern","state","includes","paramMap","subscribe","params","id_register","get","getRegister","Number","res","other","setValue","submit","valid","setRegister","value","console","log","clean","popUp","nativeElement","showModal","update","updateRegister","redirectToListRegister","navigate","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/content/administracion/cajas/nueva-caja/nueva-caja.component.ts"],"sourcesContent":["import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { tap } from 'rxjs';\nimport { ComunicatorComponetsService } from 'src/app/services/comunicator/comunicator-componets.service';\nimport { DinamicInput } from 'src/app/utils/DinamicInput';\n\n@Component({\n  selector: 'app-nueva-caja',\n  templateUrl: './nueva-caja.component.html',\n  styleUrls: ['./nueva-caja.component.css']\n})\n\nexport class NuevaCajaComponent extends DinamicInput {\n\n  newRegister!: FormGroup;\n  usedClass: string[] = [];\n  title: string[];\n  registerToUpdate: string[] = []\n  ruta: string;\n  id_register!: string | null;\n  @ViewChild('popup', { static: false }) popUp?: ElementRef;\n\n  constructor(private fb: FormBuilder, private comunicatorSvc$: ComunicatorComponetsService,\n    private routes: Router, private route: ActivatedRoute) {\n    super();\n    \n    this.usedClass[0] = \"input-on-focus\";\n    this.ruta = this.routes.url.slice((this.routes.url.slice(1).indexOf('/'))+2);\n    this.title = []\n    if (this.ruta.indexOf(\"actualizar\")) {\n      this.title.push(\"fa-solid fa-cash-register fa-fw\");//aa単ado el icono del titulo al array\n    } else {\n      this.ruta = this.routes.url.slice((this.routes.url.slice(1).indexOf('/'))+2,this.routes.url.lastIndexOf('/'));\n      this.title.push(\"fa fa-arrows-rotate\");\n    }\n    this.title.push(decodeURI(this.ruta).toUpperCase());//a単ado el titulo al array\n    this.comunicatorSvc$.setTitleComponent(this.title);\n  }\n\n  ngOnInit() {\n\n    this.newRegister = this.fb.group({\n      name: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]+$/)]),\n      state: new FormControl('Habilitada')\n    })\n    if (this.ruta.includes(\"actualizar\")) {\n      this.route.paramMap.subscribe((params: ParamMap) => {\n        this.id_register = params.get('id_register');\n        this.comunicatorSvc$.getRegister(Number(this.id_register)).subscribe(\n          res => {\n            let other: any = res\n            this.newRegister.get('name')?.setValue(res[0].name)\n            this.newRegister.get('state')?.setValue( res[0].state)\n          }\n        );\n      });\n    }\n  }\n\n  submit() {\n    if (this.newRegister.valid) {\n      this.comunicatorSvc$.setRegister(this.newRegister.value).subscribe(res=>console.log(res))\n    }\n  }\n  clean() {\n    this.newRegister.get('name')?.setValue('');\n    console.log(this.popUp?.nativeElement);\n    this.popUp?.nativeElement.showModal()\n  }\n  update(){\n    this.comunicatorSvc$.updateRegister(Number(this.id_register),this.newRegister.value).subscribe(\n      res=>console.log(res)\n    )\n    this.redirectToListRegister();\n  }\n  redirectToListRegister() {\n    this.routes.navigate(['/administracion/lista cajas'])\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}