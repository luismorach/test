{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DinamicTable } from 'src/app/utils/DinamicTable';\nlet ListaCategoriasComponent = class ListaCategoriasComponent extends DinamicTable {\n  constructor(fb, renderer, comunicatorSvc$, routes, categoriasSvc) {\n    super(renderer);\n    this.fb = fb;\n    this.renderer = renderer;\n    this.comunicatorSvc$ = comunicatorSvc$;\n    this.routes = routes;\n    this.categoriasSvc = categoriasSvc;\n    this.result = [];\n    this.categories = [];\n    this.title = [];\n    this.currentData = [];\n  }\n  ngOnInit() {\n    setTimeout(() => {\n      //Obtengo la ruta actual y la transformo para obtener el titulo del componente\n      let ruta = this.routes.url.slice(this.routes.url.slice(1).indexOf('/') + 2);\n      //A単ado el icono del titulo al array\n      this.title.push(\"fas fa-clipboard-list fa-fw\");\n      //A単ado el titulo al array\n      this.title.push(decodeURI(ruta).toUpperCase());\n      //A単ado el array al observer para que otros componentes se enteren del contenido\n      this.comunicatorSvc$.setTitleComponent(this.title);\n    });\n    //Me suscribo al observer para obtener toda la lista de cajas en mi base de datos\n    this.data$ = this.categoriasSvc.getCategories().subscribe({\n      next: res => {\n        this.currentData = res;\n        this.categories = res;\n      },\n      error: error => {\n        this.error(error);\n      },\n      complete: () => {\n        //inserto la cantidad de paginas al DOM segun la cantidad de datos que tengo\n        this.createPages(this.tableSearch, this.currentData, this.categories);\n        //Me suscribo al observer para obtener la lista de cajas actuales\n        //Si se filtran los datos, me devolvera las cajas filtradas\n        //si no, me devolvera todas las cajas\n        this.comunicatorSvc$.getData().subscribe(res => this.currentData = res);\n      }\n    });\n    this.tableSearch = new FormGroup({\n      search: new FormControl(),\n      numberRows: new FormControl('10')\n    });\n  }\n  error(error) {\n    this.changeModal(this.comunicatorSvc$.errorServer(error));\n    this.popUp?.nativeElement.showModal();\n  }\n  redirectToUpdate(data) {\n    this.routes.navigate(['/administracion/actualizar categoria/' + data.id_category]);\n  }\n  delete(data) {\n    this.popUp?.nativeElement.close();\n    if (this.popUp?.nativeElement.children[1].textContent === '多Estas seguro?') {\n      //elimino la caja de mi base de datos\n      this.categoriasSvc.deleteCategory(data.id_category).subscribe({\n        next: res => {\n          this.changeModal(res);\n          this.popUp?.nativeElement.showModal();\n        },\n        error: error => {\n          this.changeModal(this.comunicatorSvc$.errorServer(error));\n          this.popUp?.nativeElement.showModal();\n        },\n        complete: () => {\n          //Obtengo el indice del elemento que voy a eliminar\n          let index = this.categories.indexOf(data);\n          //elimino el elemento de mi lista de cajas totales\n          this.categories.splice(index, 1);\n          //elimino el elemento de mi lista de cajas actuales\n          index = this.currentData.indexOf(data);\n          this.currentData.splice(index, 1);\n          //elimino la fila de mi tabla en la vista\n          let values = this.getValuesToPipe(this.tableSearch);\n          let rowToDelete = index - values.numberRows * values.indexCurrentPage;\n          this.renderer.removeChild(this.row?.nativeElement, this.row?.nativeElement.children[rowToDelete]);\n          //renderizo la paginacion una vez mas, para que se actualice\n          this.createPages(this.tableSearch, this.currentData, this.categories);\n        }\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.data$.unsubscribe();\n  }\n};\n__decorate([ViewChild('pagination', {\n  static: false\n})], ListaCategoriasComponent.prototype, \"pagination\", void 0);\n__decorate([ViewChild('next', {\n  static: false\n})], ListaCategoriasComponent.prototype, \"next\", void 0);\n__decorate([ViewChild('dataTables_info', {\n  static: false\n})], ListaCategoriasComponent.prototype, \"info\", void 0);\n__decorate([ViewChild('rows', {\n  static: false\n})], ListaCategoriasComponent.prototype, \"row\", void 0);\n__decorate([ViewChild('popup', {\n  static: true\n})], ListaCategoriasComponent.prototype, \"popUp\", void 0);\nListaCategoriasComponent = __decorate([Component({\n  selector: 'app-lista-categorias',\n  templateUrl: './lista-categorias.component.html',\n  styleUrls: ['./lista-categorias.component.css']\n})], ListaCategoriasComponent);\nexport { ListaCategoriasComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormControl","FormGroup","DinamicTable","ListaCategoriasComponent","constructor","fb","renderer","comunicatorSvc$","routes","categoriasSvc","ngOnInit","setTimeout","ruta","url","slice","indexOf","title","push","decodeURI","toUpperCase","setTitleComponent","data$","getCategories","subscribe","next","res","currentData","categories","error","complete","createPages","tableSearch","getData","search","numberRows","changeModal","errorServer","popUp","nativeElement","showModal","redirectToUpdate","data","navigate","id_category","delete","close","children","textContent","deleteCategory","index","splice","values","getValuesToPipe","rowToDelete","indexCurrentPage","removeChild","row","ngOnDestroy","unsubscribe","__decorate","static","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/content/administracion/categorias/lista-categorias/lista-categorias.component.ts"],"sourcesContent":["import { Component, ElementRef, Renderer2, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subscription, tap } from 'rxjs';\nimport { category } from 'src/app/interfaces/interfaces';\nimport { ComunicatorComponetsService } from 'src/app/services/comunicator/comunicator-componets.service';\nimport { DinamicTable } from 'src/app/utils/DinamicTable';\nimport { CategoriasService } from '../service/categorias.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-lista-categorias',\n  templateUrl: './lista-categorias.component.html',\n  styleUrls: ['./lista-categorias.component.css']\n})\nexport class ListaCategoriasComponent extends DinamicTable {\n  tableSearch!: FormGroup;\n  result: any[] = [];\n  data$!: Subscription;\n  categories: category[] = [];\n  title: string[] = [];\n  currentData: category[] = [];\n  categoryToDelete!:category;\n\n  //Elemento donde se insertaran los numeros \n  //de paginas para la paginacion\n  @ViewChild('pagination', { static: false }) override pagination?: ElementRef;\n  //Elemento antes del cual se comenzaran a insertar las paginas\n  @ViewChild('next', { static: false }) override next?: ElementRef;\n  //Elemento que muestra la informacion acerca de la cantidad de paginas mostradas, y filtradas\n  @ViewChild('dataTables_info', { static: false }) override info?: ElementRef;\n  //Elemento que tiene todas las filas de la tabla de la vista\n  @ViewChild('rows', { static: false }) row?: ElementRef;\n  //Elemento modal para mostrar alertas\n  @ViewChild('popup', { static: true }) override popUp?: ElementRef;\n\n  constructor(private fb: FormBuilder,\n    public override renderer: Renderer2,\n    private comunicatorSvc$: ComunicatorComponetsService,\n    private routes: Router,\n    private categoriasSvc: CategoriasService) {\n    super(renderer)\n  }\n  ngOnInit() {\n    setTimeout(() => {\n      //Obtengo la ruta actual y la transformo para obtener el titulo del componente\n      let ruta = this.routes.url.slice((this.routes.url.slice(1).indexOf('/')) + 2);\n      //A単ado el icono del titulo al array\n      this.title.push(\"fas fa-clipboard-list fa-fw\");\n      //A単ado el titulo al array\n      this.title.push(decodeURI(ruta).toUpperCase());\n      //A単ado el array al observer para que otros componentes se enteren del contenido\n      this.comunicatorSvc$.setTitleComponent(this.title);\n    });\n\n    //Me suscribo al observer para obtener toda la lista de cajas en mi base de datos\n    this.data$ = this.categoriasSvc.getCategories().subscribe({\n      next: res => { this.currentData = res; this.categories = res },\n      error: (error: HttpErrorResponse) => {\n        this.error(error)\n      },\n      complete: () => {\n        //inserto la cantidad de paginas al DOM segun la cantidad de datos que tengo\n        this.createPages(this.tableSearch, this.currentData, this.categories)\n        //Me suscribo al observer para obtener la lista de cajas actuales\n        //Si se filtran los datos, me devolvera las cajas filtradas\n        //si no, me devolvera todas las cajas\n        this.comunicatorSvc$.getData().subscribe(res => this.currentData = res)\n      }\n    }\n    );\n    this.tableSearch = new FormGroup({\n      search: new FormControl(),\n      numberRows: new FormControl('10')\n    });\n  }\n  public error(error: HttpErrorResponse) {\n    this.changeModal(this.comunicatorSvc$.errorServer(error))\n    this.popUp?.nativeElement.showModal()\n  }\n\n  redirectToUpdate(data: category) {\n    this.routes.navigate(['/administracion/actualizar categoria/' + data.id_category])\n  }\n\n  delete(data: category) {\n    this.popUp?.nativeElement.close()\n    if (this.popUp?.nativeElement.children[1].textContent === '多Estas seguro?') {\n\n      //elimino la caja de mi base de datos\n      this.categoriasSvc.deleteCategory(data.id_category).subscribe({\n        next: res => {\n          this.changeModal(res);\n          this.popUp?.nativeElement.showModal();\n        },\n        error: (error: HttpErrorResponse) => {\n          this.changeModal(this.comunicatorSvc$.errorServer(error))\n          this.popUp?.nativeElement.showModal()\n        },\n        complete: () => {\n          //Obtengo el indice del elemento que voy a eliminar\n          let index = this.categories.indexOf(data)\n          //elimino el elemento de mi lista de cajas totales\n          this.categories.splice(index, 1)\n          //elimino el elemento de mi lista de cajas actuales\n          index = this.currentData.indexOf(data)\n          this.currentData.splice(index, 1)\n          //elimino la fila de mi tabla en la vista\n          let values = this.getValuesToPipe(this.tableSearch)\n          let rowToDelete = index - (values.numberRows * values.indexCurrentPage)\n          this.renderer.removeChild(this.row?.nativeElement, this.row?.nativeElement.children[rowToDelete])\n          //renderizo la paginacion una vez mas, para que se actualice\n          this.createPages(this.tableSearch, this.currentData, this.categories)\n        }\n      })\n\n    }\n  }\n  ngOnDestroy() {\n    this.data$.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}