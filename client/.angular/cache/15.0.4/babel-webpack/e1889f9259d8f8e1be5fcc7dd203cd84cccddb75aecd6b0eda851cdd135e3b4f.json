{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ComprasService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:3000/buys';\n  }\n  //accedo al backend para obtener datos de todas las cajas\n  getBuys() {\n    return this.http.get(this.apiURL);\n  }\n  getBuysBydate(initialDate, endDate) {\n    return this.http.get(this.apiURL + '/' + new Intl.DateTimeFormat('es-CL').format(initialDate) + '/' + new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  getBuy(id_buy) {\n    return this.http.get(this.apiURL + '/' + id_buy);\n  }\n  getBuyByUser(names) {\n    return this.http.get(this.apiURL + 'byUser/' + names);\n  }\n  getBuyByProvider(name) {\n    return this.http.get(this.apiURL + 'byProvider/' + name);\n  }\n  getProductsBuy(id_buy) {\n    return this.http.get(this.apiURL + 'Products/' + id_buy);\n  }\n  //accedo al backend para crear una nueva caja\n  setBuy(buy) {\n    return this.http.post(this.apiURL, buy);\n  }\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  updateBuy(id_buy, buy) {\n    return this.http.put(this.apiURL + '/' + id_buy, buy);\n  }\n  updateProductsBuy(id_buy, id_product, buy_product) {\n    return this.http.put(this.apiURL + 'Products/' + id_buy + '/' + id_product, buy_product);\n  }\n  //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  deleteBuy(id_buy) {\n    return this.http.delete(this.apiURL + '/' + id_buy);\n  }\n}\nComprasService.ɵfac = function ComprasService_Factory(t) {\n  return new (t || ComprasService)(i0.ɵɵinject(i1.HttpClient));\n};\nComprasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComprasService,\n  factory: ComprasService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,4BAA4B;EACL;EAExC;EACOC,OAAO;IACZ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,MAAM,CAAC;EAC1C;EACOC,aAAa,CAACC,WAAgB,EAACC,OAAY;IAChD,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,MAAM,GAAC,GAAG,GAAC,IAAII,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,GAC/F,GAAG,GAAC,IAAIE,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACH,OAAO,CAAC,CAAC;EACxD;EACA;EACOI,MAAM,CAACC,MAAc;IAC1B,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGQ,MAAM,CAAC;EAC/D;EACOC,YAAY,CAACC,KAAY;IAC9B,OAAO,IAAI,CAACb,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,GAAG,SAAS,GAAEU,KAAK,CAAC;EACnE;EACOC,gBAAgB,CAACC,IAAW;IACjC,OAAO,IAAI,CAACf,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,GAAG,aAAa,GAAEY,IAAI,CAAC;EACtE;EACOC,cAAc,CAACL,MAAc;IAClC,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAsB,IAAI,CAACC,MAAM,GAAG,WAAW,GAAGQ,MAAM,CAAC;EAC/E;EAEA;EACOM,MAAM,CAACC,GAAQ;IACpB,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAQ,IAAI,CAAChB,MAAM,EAAEe,GAAG,CAAC;EAChD;EAEA;EACOE,SAAS,CAACT,MAAc,EAAEO,GAAQ;IACvC,OAAO,IAAI,CAAClB,IAAI,CAACqB,GAAG,CAAQ,IAAI,CAAClB,MAAM,GAAG,GAAG,GAAGQ,MAAM,EAAEO,GAAG,CAAC;EAC9D;EACOI,iBAAiB,CAACX,MAAc,EAACY,UAAiB,EAAEC,WAAwB;IACjF,OAAO,IAAI,CAACxB,IAAI,CAACqB,GAAG,CAAQ,IAAI,CAAClB,MAAM,GAAG,WAAW,GAAGQ,MAAM,GAAC,GAAG,GAACY,UAAU,EAAEC,WAAW,CAAC;EAC7F;EAEC;EACMC,SAAS,CAACd,MAAc;IAC7B,OAAO,IAAI,CAACX,IAAI,CAAC0B,MAAM,CAAQ,IAAI,CAACvB,MAAM,GAAG,GAAG,GAAGQ,MAAM,CAAC;EAC5D;;AA3CWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA6B,SAAd7B,cAAc;EAAA8B,YAFb;AAAM","names":["ComprasService","constructor","http","getBuys","get","apiURL","getBuysBydate","initialDate","endDate","Intl","DateTimeFormat","format","getBuy","id_buy","getBuyByUser","names","getBuyByProvider","name","getProductsBuy","setBuy","buy","post","updateBuy","put","updateProductsBuy","id_product","buy_product","deleteBuy","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/content/compras/service/compras.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { buy,alert, buy_product } from 'src/app/interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComprasService {\n\n  private apiURL = 'http://localhost:3000/buys';\n  constructor(private http: HttpClient) { }\n\n  //accedo al backend para obtener datos de todas las cajas\n  public getBuys(): Observable<buy[]> {\n    return this.http.get<buy[]>(this.apiURL);\n  }\n  public getBuysBydate(initialDate:Date,endDate:Date): Observable<buy[]> {\n    return this.http.get<buy[]>(this.apiURL+'/'+new Intl.DateTimeFormat('es-CL').format(initialDate)\n    +'/'+new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  public getBuy(id_buy: number): Observable<buy[]|alert> {\n    return this.http.get<buy[]|alert>(this.apiURL + '/' + id_buy);\n  }\n  public getBuyByUser(names:string): Observable<buy[]|alert> {\n    return this.http.get<buy[]|alert>(this.apiURL + 'byUser/' +names);\n  }\n  public getBuyByProvider(name:string): Observable<buy[]|alert> {\n    return this.http.get<buy[]|alert>(this.apiURL + 'byProvider/' +name);\n  }\n  public getProductsBuy(id_buy: number): Observable<buy_product[]|alert> {\n    return this.http.get<buy_product[]|alert>(this.apiURL + 'Products/' + id_buy);\n  }\n\n  //accedo al backend para crear una nueva caja\n  public setBuy(buy: buy): Observable<alert> {\n    return this.http.post<alert>(this.apiURL, buy)\n  }\n\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  public updateBuy(id_buy: number, buy: buy): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + '/' + id_buy, buy)\n  }\n  public updateProductsBuy(id_buy: number,id_product:number, buy_product: buy_product): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + 'Products/' + id_buy+'/'+id_product, buy_product)\n  }\n\n   //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  public deleteBuy(id_buy: number): Observable<alert> {\n    return this.http.delete<alert>(this.apiURL + '/' + id_buy)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}