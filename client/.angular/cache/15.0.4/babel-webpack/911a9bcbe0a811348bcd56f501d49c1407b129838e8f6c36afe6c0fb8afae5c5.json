{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ComunicatorComponetsService {\n  constructor(http) {\n    this.http = http;\n    this.listData$ = new BehaviorSubject([]);\n    this.state$ = new BehaviorSubject(true);\n    this.titleComponent$ = new BehaviorSubject([]);\n    this.apiURL = 'http://localhost:3000/registers';\n  }\n  setshowHideNavBar(state) {\n    this.state$.next(state);\n  }\n  getShowHideNavBar() {\n    return this.state$.asObservable();\n  }\n  setTitleComponent(title) {\n    this.titleComponent$.next(title);\n  }\n  getTitleComponent() {\n    return this.titleComponent$.asObservable();\n  }\n  setData(data) {\n    this.listData$.next(data);\n  }\n  getData() {\n    return this.listData$.asObservable();\n  }\n  errorServer(error) {\n    let content;\n    if (error.error instanceof Error) {\n      content = 'Error cliente o red:' + error.error.message;\n    } else {\n      content = 'Error en el servidor remoto.' + error.message;\n    }\n    let values = {\n      icon: '',\n      title: 'Ocurrió un error inesperado',\n      content: content\n    };\n    return values;\n  }\n  getRegisters() {\n    return this.http.get(this.apiURL);\n  }\n  getRegister(id_register) {\n    return this.http.get(this.apiURL + '/' + id_register);\n  }\n  setRegister(register) {\n    return this.http.post(this.apiURL, register);\n  }\n  updateRegister(id_register, register) {\n    return this.http.put(this.apiURL + '/' + id_register, register);\n  }\n  deleteRegister(id_register) {\n    return this.http.delete(this.apiURL + '/' + id_register);\n  }\n}\nComunicatorComponetsService.ɵfac = function ComunicatorComponetsService_Factory(t) {\n  return new (t || ComunicatorComponetsService)(i0.ɵɵinject(i1.HttpClient));\n};\nComunicatorComponetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComunicatorComponetsService,\n  factory: ComunicatorComponetsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAA6B,MAAM;;;AAO3D,OAAM,MAAOC,2BAA2B;EAMtCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALhB,cAAS,GAA2B,IAAIH,eAAe,CAAQ,EAAE,CAAC;IAClE,WAAM,GAA6B,IAAIA,eAAe,CAAU,IAAI,CAAC;IACrE,oBAAe,GAA8B,IAAIA,eAAe,CAAW,EAAE,CAAC;IAC9E,WAAM,GAAG,iCAAiC;EAEV;EAEjCI,iBAAiB,CAACC,KAAc;IACrC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EACzB;EAEOG,iBAAiB;IACtB,OAAO,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;EACnC;EAEOC,iBAAiB,CAACC,KAAU;IACjC,IAAI,CAACC,eAAe,CAACL,IAAI,CAACI,KAAK,CAAC;EAClC;EACOE,iBAAiB;IACtB,OAAO,IAAI,CAACD,eAAe,CAACH,YAAY,EAAE;EAC5C;EAEOK,OAAO,CAACC,IAAS;IACtB,IAAI,CAACC,SAAS,CAACT,IAAI,CAACQ,IAAI,CAAC;EAC3B;EACOE,OAAO;IACZ,OAAO,IAAI,CAACD,SAAS,CAACP,YAAY,EAAE;EACtC;EACOS,WAAW,CAACC,KAAwB;IACzC,IAAIC,OAAc;IAClB,IAAID,KAAK,CAACA,KAAK,YAAYE,KAAK,EAAE;MAChCD,OAAO,GAAC,sBAAsB,GAAED,KAAK,CAACA,KAAK,CAACG,OAAO;KACpD,MAAM;MACLF,OAAO,GAAC,8BAA8B,GAAED,KAAK,CAAEG,OAAO;;IAExD,IAAIC,MAAM,GAAC;MACTC,IAAI,EAAC,EAAE;MACPb,KAAK,EAAC,6BAA6B;MACnCS,OAAO,EAACA;KACT;IAED,OAAOG,MAAM;EACf;EAEOE,YAAY;IACjB,OAAO,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAa,IAAI,CAACC,MAAM,CAAC;EAC/C;EACOC,WAAW,CAACC,WAAmB;IACpC,OAAO,IAAI,CAAC1B,IAAI,CAACuB,GAAG,CAAmB,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGE,WAAW,CAAC;EACzE;EACOC,WAAW,CAACC,QAAkB;IACnC,OAAO,IAAI,CAAC5B,IAAI,CAAC6B,IAAI,CAAQ,IAAI,CAACL,MAAM,EAAEI,QAAQ,CAAC;EACrD;EACOE,cAAc,CAACJ,WAAmB,EAAEE,QAAkB;IAC3D,OAAO,IAAI,CAAC5B,IAAI,CAAC+B,GAAG,CAAQ,IAAI,CAACP,MAAM,GAAG,GAAG,GAAGE,WAAW,EAAEE,QAAQ,CAAC;EACxE;EACOI,cAAc,CAACN,WAAmB;IACvC,OAAO,IAAI,CAAC1B,IAAI,CAACiC,MAAM,CAAQ,IAAI,CAACT,MAAM,GAAG,GAAG,GAAGE,WAAW,CAAC;EACjE;;AA3DW5B,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;SAA3BA,2BAA2B;EAAAoC,SAA3BpC,2BAA2B;EAAAqC,YAF1B;AAAM","names":["BehaviorSubject","ComunicatorComponetsService","constructor","http","setshowHideNavBar","state","state$","next","getShowHideNavBar","asObservable","setTitleComponent","title","titleComponent$","getTitleComponent","setData","data","listData$","getData","errorServer","error","content","Error","message","values","icon","getRegisters","get","apiURL","getRegister","id_register","setRegister","register","post","updateRegister","put","deleteRegister","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/services/comunicator/comunicator-componets.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { register } from 'src/app/interfaces/interfaces';\nimport { alert } from 'src/app/interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComunicatorComponetsService {\n  private listData$: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  private state$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  private titleComponent$: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\n  private apiURL = 'http://localhost:3000/registers';\n\n  constructor(private http: HttpClient) { }\n\n  public setshowHideNavBar(state: boolean) {\n    this.state$.next(state);\n  }\n\n  public getShowHideNavBar(): Observable<boolean> {\n    return this.state$.asObservable();\n  }\n\n  public setTitleComponent(title: any) {\n    this.titleComponent$.next(title);\n  }\n  public getTitleComponent(): Observable<string[]> {\n    return this.titleComponent$.asObservable();\n  }\n\n  public setData(data: any) {\n    this.listData$.next(data)\n  }\n  public getData() {\n    return this.listData$.asObservable();\n  }\n  public errorServer(error: HttpErrorResponse) {\n    let content:string\n    if (error.error instanceof Error) {\n      content='Error cliente o red:'+ error.error.message\n    } else {\n      content='Error en el servidor remoto.'+ error. message\n    }\n    let values={\n      icon:'',\n      title:'Ocurrió un error inesperado',\n      content:content\n    }\n    \n    return values\n  }\n\n  public getRegisters(): Observable<register[]> {\n    return this.http.get<register[]>(this.apiURL);\n  }\n  public getRegister(id_register: number): Observable<register[]|alert> {\n    return this.http.get<register[]|alert>(this.apiURL + '/' + id_register);\n  }\n  public setRegister(register: register): Observable<alert> {\n    return this.http.post<alert>(this.apiURL, register)\n  }\n  public updateRegister(id_register: number, register: register): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + '/' + id_register, register)\n  }\n  public deleteRegister(id_register: number): Observable<alert> {\n    return this.http.delete<alert>(this.apiURL + '/' + id_register)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}