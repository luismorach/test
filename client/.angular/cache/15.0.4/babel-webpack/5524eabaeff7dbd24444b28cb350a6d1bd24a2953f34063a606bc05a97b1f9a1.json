{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { DocumentDefinition } from './document-definition';\nimport pdfMake from 'pdfmake/build/pdfmake';\n/**\r\n * Main class that contains the essencial for build the PDF\r\n */\nvar PdfMakeWrapper = /** @class */function (_super) {\n  __extends(PdfMakeWrapper, _super);\n  function PdfMakeWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Sets custom fonts. This changes the global font types\r\n   * @param fonts {{ [propName: string]: string }} The generated fonts object\r\n   * @param fontTypesConfig {{ [propName: string]: IFontTypes }} The font type configuration\r\n   *\r\n   * @example\r\n   * import { PdfMakeWrapper } from 'pdfmake-wrapper';\r\n   * import customFonts 'path/to/custom/fonts';\r\n   *\r\n   * PdfMakeWrapper.setFonts(\r\n   *  customFonts,\r\n   *  {\r\n   *      customFonts: { // The property name can be any\r\n   *          normal: 'custom-fonts.ttf',\r\n   *          bold: 'custom-fonts-bold.ttf',\r\n   *          italics: 'custom-fonts-italics.ttf',\r\n   *          bolditalics: 'custom-fonts-bolditalics.ttf'\r\n   *      },\r\n   *      ...\r\n   *  }\r\n   * );\r\n   */\n  PdfMakeWrapper.setFonts = function (fonts, fontTypesConfig) {\n    pdfMake.vfs = fonts.pdfMake.vfs;\n    if (fontTypesConfig) {\n      pdfMake.fonts = fontTypesConfig;\n    }\n  };\n  /**\r\n   * Create the PDF\r\n   */\n  PdfMakeWrapper.prototype.create = function () {\n    return pdfMake.createPdf(this.getDefinition());\n  };\n  // ======================== HELPERS =========================\n  /**\r\n   * It returns new lines\r\n   * @param num numbers of newline\r\n   * @deprecated This will be deprecated in next minor version\r\n   */\n  PdfMakeWrapper.prototype.ln = function (num) {\n    if (num === void 0) {\n      num = 1;\n    }\n    if (num < 1) num = 1;\n    return '\\n'.repeat(num);\n  };\n  return PdfMakeWrapper;\n}(DocumentDefinition);\nexport { PdfMakeWrapper };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","DocumentDefinition","pdfMake","PdfMakeWrapper","_super","apply","arguments","setFonts","fonts","fontTypesConfig","vfs","createPdf","getDefinition","ln","num","repeat"],"sources":["/home/luis/Documentos/systems vs code/inventary-system/client/node_modules/pdfmake-wrapper/lib/pdfmake-wrapper.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { DocumentDefinition } from './document-definition';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\n/**\r\n * Main class that contains the essencial for build the PDF\r\n */\r\nvar PdfMakeWrapper = /** @class */ (function (_super) {\r\n    __extends(PdfMakeWrapper, _super);\r\n    function PdfMakeWrapper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Sets custom fonts. This changes the global font types\r\n     * @param fonts {{ [propName: string]: string }} The generated fonts object\r\n     * @param fontTypesConfig {{ [propName: string]: IFontTypes }} The font type configuration\r\n     *\r\n     * @example\r\n     * import { PdfMakeWrapper } from 'pdfmake-wrapper';\r\n     * import customFonts 'path/to/custom/fonts';\r\n     *\r\n     * PdfMakeWrapper.setFonts(\r\n     *  customFonts,\r\n     *  {\r\n     *      customFonts: { // The property name can be any\r\n     *          normal: 'custom-fonts.ttf',\r\n     *          bold: 'custom-fonts-bold.ttf',\r\n     *          italics: 'custom-fonts-italics.ttf',\r\n     *          bolditalics: 'custom-fonts-bolditalics.ttf'\r\n     *      },\r\n     *      ...\r\n     *  }\r\n     * );\r\n     */\r\n    PdfMakeWrapper.setFonts = function (fonts, fontTypesConfig) {\r\n        pdfMake.vfs = fonts.pdfMake.vfs;\r\n        if (fontTypesConfig) {\r\n            pdfMake.fonts = fontTypesConfig;\r\n        }\r\n    };\r\n    /**\r\n     * Create the PDF\r\n     */\r\n    PdfMakeWrapper.prototype.create = function () {\r\n        return pdfMake.createPdf(this.getDefinition());\r\n    };\r\n    // ======================== HELPERS =========================\r\n    /**\r\n     * It returns new lines\r\n     * @param num numbers of newline\r\n     * @deprecated This will be deprecated in next minor version\r\n     */\r\n    PdfMakeWrapper.prototype.ln = function (num) {\r\n        if (num === void 0) { num = 1; }\r\n        if (num < 1)\r\n            num = 1;\r\n        return '\\n'.repeat(num);\r\n    };\r\n    return PdfMakeWrapper;\r\n}(DocumentDefinition));\r\nexport { PdfMakeWrapper };\r\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAE,GAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;EACxF,CAAC;AACL,CAAC,EAAG;AACJ,SAASI,kBAAkB,QAAQ,uBAAuB;AAC1D,OAAOC,OAAO,MAAM,uBAAuB;AAC3C;AACA;AACA;AACA,IAAIC,cAAc,GAAG,aAAe,UAAUC,MAAM,EAAE;EAClDjB,SAAS,CAACgB,cAAc,EAAEC,MAAM,CAAC;EACjC,SAASD,cAAc,GAAG;IACtB,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIH,cAAc,CAACI,QAAQ,GAAG,UAAUC,KAAK,EAAEC,eAAe,EAAE;IACxDP,OAAO,CAACQ,GAAG,GAAGF,KAAK,CAACN,OAAO,CAACQ,GAAG;IAC/B,IAAID,eAAe,EAAE;MACjBP,OAAO,CAACM,KAAK,GAAGC,eAAe;IACnC;EACJ,CAAC;EACD;AACJ;AACA;EACIN,cAAc,CAACJ,SAAS,CAACC,MAAM,GAAG,YAAY;IAC1C,OAAOE,OAAO,CAACS,SAAS,CAAC,IAAI,CAACC,aAAa,EAAE,CAAC;EAClD,CAAC;EACD;EACA;AACJ;AACA;AACA;AACA;EACIT,cAAc,CAACJ,SAAS,CAACc,EAAE,GAAG,UAAUC,GAAG,EAAE;IACzC,IAAIA,GAAG,KAAK,KAAK,CAAC,EAAE;MAAEA,GAAG,GAAG,CAAC;IAAE;IAC/B,IAAIA,GAAG,GAAG,CAAC,EACPA,GAAG,GAAG,CAAC;IACX,OAAO,IAAI,CAACC,MAAM,CAACD,GAAG,CAAC;EAC3B,CAAC;EACD,OAAOX,cAAc;AACzB,CAAC,CAACF,kBAAkB,CAAE;AACtB,SAASE,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}