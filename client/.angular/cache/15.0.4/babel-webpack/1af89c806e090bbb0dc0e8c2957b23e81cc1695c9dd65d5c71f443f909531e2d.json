{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmpresaService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:3000/building';\n  }\n  //accedo al backend para obtener datos de todas las cajas\n  getBuildings() {\n    return this.http.get(this.apiURL);\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  getBuilding(id_building) {\n    return this.http.get(this.apiURL + '/' + id_building);\n  }\n  getbuildingoByCategory(id_category) {\n    return this.http.get(this.apiURL + '/category/' + id_category);\n  }\n  //accedo al backend para crear una nueva caja\n  setBuilding(building) {\n    return this.http.post(this.apiURL, building);\n  }\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  updateBuilding(id_building, building) {\n    return this.http.put(this.apiURL + '/' + id_building, building);\n  }\n  //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  deleteBuilding(id_building) {\n    return this.http.delete(this.apiURL + '/' + id_building);\n  }\n}\nEmpresaService.ɵfac = function EmpresaService_Factory(t) {\n  return new (t || EmpresaService)(i0.ɵɵinject(i1.HttpClient));\n};\nEmpresaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmpresaService,\n  factory: EmpresaService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,gCAAgC;EACT;EAExC;EACOC,YAAY;IACjB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,IAAI,CAACC,MAAM,CAAC;EAC/C;EAEA;EACOC,WAAW,CAACC,WAAmB;IACpC,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAmB,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGE,WAAW,CAAC;EACzE;EACOC,sBAAsB,CAACC,WAAmB;IAC/C,OAAO,IAAI,CAACP,IAAI,CAACE,GAAG,CAAmB,IAAI,CAACC,MAAM,GAAG,YAAY,GAAGI,WAAW,CAAC;EAClF;EAEA;EACOC,WAAW,CAACC,QAAkB;IACnC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAQ,IAAI,CAACP,MAAM,EAAEM,QAAQ,CAAC;EACrD;EAEA;EACOE,cAAc,CAACN,WAAmB,EAAEI,QAAkB;IAC3D,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAQ,IAAI,CAACT,MAAM,GAAG,GAAG,GAAGE,WAAW,EAAEI,QAAQ,CAAC;EACxE;EAEC;EACMI,cAAc,CAACR,WAAmB;IACvC,OAAO,IAAI,CAACL,IAAI,CAACc,MAAM,CAAQ,IAAI,CAACX,MAAM,GAAG,GAAG,GAAGE,WAAW,CAAC;EACjE;;AA/BWP,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAiB,SAAdjB,cAAc;EAAAkB,YAFb;AAAM","names":["EmpresaService","constructor","http","getBuildings","get","apiURL","getBuilding","id_building","getbuildingoByCategory","id_category","setBuilding","building","post","updateBuilding","put","deleteBuilding","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/administrador/content/configuraciones/service/empresa.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { building,alert } from 'src/app/interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpresaService {\n\n  private apiURL = 'http://localhost:3000/building';\n  constructor(private http: HttpClient) { }\n\n  //accedo al backend para obtener datos de todas las cajas\n  public getBuildings(): Observable<building[]> {\n    return this.http.get<building[]>(this.apiURL);\n  }\n\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  public getBuilding(id_building: number): Observable<building[]|alert> {\n    return this.http.get<building[]|alert>(this.apiURL + '/' + id_building);\n  }\n  public getbuildingoByCategory(id_category: number): Observable<building[]|alert> {\n    return this.http.get<building[]|alert>(this.apiURL + '/category/' + id_category);\n  }\n\n  //accedo al backend para crear una nueva caja\n  public setBuilding(building: building): Observable<alert> {\n    return this.http.post<alert>(this.apiURL, building)\n  }\n\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  public updateBuilding(id_building: number, building: building): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + '/' + id_building, building)\n  }\n\n   //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  public deleteBuilding(id_building: number): Observable<alert> {\n    return this.http.delete<alert>(this.apiURL + '/' + id_building)\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}