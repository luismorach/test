{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TableFilterPipe {\n  transform(value, args) {\n    const result = [];\n    for (let newValue of value) {\n      if (args.search === null || args.search === '') {\n        result.push(newValue);\n      } else if (newValue.name.indexOf(args.search) > -1) {\n        result.push(newValue);\n      }\n    }\n    console.log(\"valores de filtro\", args.indexCurrentPage, \"number rows\", args.numberRows);\n    return result.slice(args.indexCurrentPage * args.numberRows, args.indexCurrentPage * args.numberRows + args.numberRows);\n  }\n}\nTableFilterPipe.ɵfac = function TableFilterPipe_Factory(t) {\n  return new (t || TableFilterPipe)();\n};\nTableFilterPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"tableFilter\",\n  type: TableFilterPipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAE1BC,SAAS,CAACC,KAAU,EAACC,IAAQ;IAC3B,MAAMC,MAAM,GAAG,EAAE;IAEjB,KAAK,IAAIC,QAAQ,IAAIH,KAAK,EAAE;MAC1B,IAAGC,IAAI,CAACG,MAAM,KAAG,IAAI,IAAIH,IAAI,CAACG,MAAM,KAAG,EAAE,EAAC;QACxCF,MAAM,CAACG,IAAI,CAACF,QAAQ,CAAC;OACtB,MAAK,IAAIA,QAAQ,CAACG,IAAI,CAACC,OAAO,CAACN,IAAI,CAACG,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;QACjDF,MAAM,CAACG,IAAI,CAACF,QAAQ,CAAC;;;IAGzBK,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAC/BR,IAAI,CAACS,gBAAgB,EAAC,aAAa,EAACT,IAAI,CAACU,UAAU,CAAC;IACpD,OAAOT,MAAM,CAACU,KAAK,CAACX,IAAI,CAACS,gBAAgB,GAACT,IAAI,CAACU,UAAU,EACtDV,IAAI,CAACS,gBAAgB,GAACT,IAAI,CAACU,UAAU,GAAEV,IAAI,CAACU,UAAU,CAAC;EAE5D;;AAjBWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;;QAAfA,eAAe;EAAAe;AAAA","names":["TableFilterPipe","transform","value","args","result","newValue","search","push","name","indexOf","console","log","indexCurrentPage","numberRows","slice","pure"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/app/src/app/pipes/table-filter.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'tableFilter'\n})\nexport class TableFilterPipe implements PipeTransform {\n\n  transform(value: any,args:any): any {\n    const result = [];\n   \n    for (let newValue of value) {\n      if(args.search===null || args.search===''){\n        result.push(newValue)\n      }else if (newValue.name.indexOf(args.search) > -1) {\n        result.push(newValue)\n      }\n    }\n    console.log(\"valores de filtro\",\n    args.indexCurrentPage,\"number rows\",args.numberRows)\n    return result.slice(args.indexCurrentPage*args.numberRows,\n      (args.indexCurrentPage*args.numberRows)+args.numberRows);\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}