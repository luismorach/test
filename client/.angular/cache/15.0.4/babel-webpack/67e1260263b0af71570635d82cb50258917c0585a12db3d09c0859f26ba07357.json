{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VentasService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:3000/sells';\n  }\n  //accedo al backend para obtener datos de todas las cajas\n  getSells() {\n    return this.http.get(this.apiURL);\n  }\n  getSellsBydate(initialDate, endDate) {\n    return this.http.get(this.apiURL + '/' + new Intl.DateTimeFormat('es-CL').format(initialDate) + '/' + new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  getSellBydate(initialDate, endDate) {\n    return this.http.get(this.apiURL + 'ByDate/' + new Intl.DateTimeFormat('es-CL').format(initialDate) + '/' + new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  getSell(id_Sell) {\n    return this.http.get(this.apiURL + '/' + id_Sell);\n  }\n  getSellByUser(names) {\n    return this.http.get(this.apiURL + 'byUser/' + names);\n  }\n  getSellByClient(names) {\n    return this.http.get(this.apiURL + 'byClient/' + names);\n  }\n  getProductsSell(id_Sell) {\n    return this.http.get(this.apiURL + 'Products/' + id_Sell);\n  }\n  getProductSell(id_Sell, id_product) {\n    return this.http.get(this.apiURL + 'Product/' + id_Sell + '/' + id_product);\n  }\n  getPaysSell(id_Sell) {\n    return this.http.get(this.apiURL + 'Pays/' + id_Sell);\n  }\n  getPaysByDate(initialDate, endDate, coin, type) {\n    return this.http.get(this.apiURL + 'PaysByDate/' + new Intl.DateTimeFormat('es-CL').format(initialDate) + '/' + new Intl.DateTimeFormat('es-CL').format(endDate) + '/' + coin + '/' + type);\n  }\n  //accedo al backend para crear una nueva caja\n  setSell(Sell) {\n    return this.http.post(this.apiURL, Sell);\n  }\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  updateSell(id_Sell, Sell) {\n    return this.http.put(this.apiURL + '/' + id_Sell, Sell);\n  }\n  updateProductsSell(id_Sell, id_product, Sell_product) {\n    return this.http.put(this.apiURL + 'Products/' + id_Sell + '/' + id_product, Sell_product);\n  }\n  //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  deleteSell(id_Sell) {\n    return this.http.delete(this.apiURL + '/' + id_Sell);\n  }\n}\nVentasService.ɵfac = function VentasService_Factory(t) {\n  return new (t || VentasService)(i0.ɵɵinject(i1.HttpClient));\n};\nVentasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VentasService,\n  factory: VentasService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,6BAA6B;EACN;EAExC;EACOC,QAAQ;IACb,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,MAAM,CAAC;EAC3C;EACOC,cAAc,CAACC,WAAgB,EAACC,OAAY;IACjD,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAyB,IAAI,CAACC,MAAM,GAAC,GAAG,GAAC,IAAII,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,GAChH,GAAG,GAAC,IAAIE,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACH,OAAO,CAAC,CAAC;EACxD;EACOI,aAAa,CAACL,WAAgB,EAACC,OAAY;IAChD,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAyB,IAAI,CAACC,MAAM,GAAC,SAAS,GAClE,IAAII,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,GACnD,GAAG,GAAC,IAAIE,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACH,OAAO,CAAC,CAAC;EACxD;EACA;EACOK,OAAO,CAACC,OAAe;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAyB,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGS,OAAO,CAAC;EAC3E;EACOC,aAAa,CAACC,KAAY;IAC/B,OAAO,IAAI,CAACd,IAAI,CAACE,GAAG,CAAe,IAAI,CAACC,MAAM,GAAG,SAAS,GAAEW,KAAK,CAAC;EACpE;EACOC,eAAe,CAACD,KAAY;IACjC,OAAO,IAAI,CAACd,IAAI,CAACE,GAAG,CAAe,IAAI,CAACC,MAAM,GAAG,WAAW,GAAEW,KAAK,CAAC;EACtE;EAEOE,eAAe,CAACJ,OAAe;IACpC,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAuB,IAAI,CAACC,MAAM,GAAG,WAAW,GAAGS,OAAO,CAAC;EACjF;EACOK,cAAc,CAACL,OAAe,EAACM,UAAiB;IACrD,OAAO,IAAI,CAAClB,IAAI,CAACE,GAAG,CAAuB,IAAI,CAACC,MAAM,GAAG,UAAU,GAAGS,OAAO,GAAC,GAAG,GAACM,UAAU,CAAC;EAC/F;EACOC,WAAW,CAACP,OAAe;IAChC,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,GAAG,OAAO,GAAGS,OAAO,CAAC;EACpE;EACOQ,aAAa,CAACf,WAAgB,EAACC,OAAY,EAACe,IAAW,EAACC,IAAW;IACxE,OAAO,IAAI,CAACtB,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,GAAG,aAAa,GAC7D,IAAII,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,GACnD,GAAG,GAAC,IAAIE,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACH,OAAO,CAAC,GAAC,GAAG,GAACe,IAAI,GAAC,GAAG,GAACC,IAAI,CAAC;EAC1E;EAEA;EACOC,OAAO,CAACC,IAAU;IACvB,OAAO,IAAI,CAACxB,IAAI,CAACyB,IAAI,CAAQ,IAAI,CAACtB,MAAM,EAAEqB,IAAI,CAAC;EACjD;EAEA;EACOE,UAAU,CAACd,OAAe,EAAEY,IAAU;IAC3C,OAAO,IAAI,CAACxB,IAAI,CAAC2B,GAAG,CAAQ,IAAI,CAACxB,MAAM,GAAG,GAAG,GAAGS,OAAO,EAAEY,IAAI,CAAC;EAChE;EACOI,kBAAkB,CAAChB,OAAe,EAACM,UAAiB,EAAEW,YAA0B;IACrF,OAAO,IAAI,CAAC7B,IAAI,CAAC2B,GAAG,CAAQ,IAAI,CAACxB,MAAM,GAAG,WAAW,GAAGS,OAAO,GAAC,GAAG,GAACM,UAAU,EAAEW,YAAY,CAAC;EAC/F;EAEC;EACMC,UAAU,CAAClB,OAAe;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAAC+B,MAAM,CAAQ,IAAI,CAAC5B,MAAM,GAAG,GAAG,GAAGS,OAAO,CAAC;EAC7D;;AA5DWd,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAkC,SAAblC,aAAa;EAAAmC,YAFZ;AAAM","names":["VentasService","constructor","http","getSells","get","apiURL","getSellsBydate","initialDate","endDate","Intl","DateTimeFormat","format","getSellBydate","getSell","id_Sell","getSellByUser","names","getSellByClient","getProductsSell","getProductSell","id_product","getPaysSell","getPaysByDate","coin","type","setSell","Sell","post","updateSell","put","updateProductsSell","Sell_product","deleteSell","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/content/ventas/service/ventas.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { alert, sell_product, sell,user,client, pay } from 'src/app/interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VentasService {\n\n  private apiURL = 'http://localhost:3000/sells';\n  constructor(private http: HttpClient) { }\n\n  //accedo al backend para obtener datos de todas las cajas\n  public getSells(): Observable<sell[]> {\n    return this.http.get<sell[]>(this.apiURL);\n  }\n  public getSellsBydate(initialDate:Date,endDate:Date): Observable<sell[]|user[]|client[]> {\n    return this.http.get<sell[]|user[]|client[]>(this.apiURL+'/'+new Intl.DateTimeFormat('es-CL').format(initialDate)\n    +'/'+new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  public getSellBydate(initialDate:Date,endDate:Date): Observable<sell[]|user[]|client[]> {\n    return this.http.get<sell[]|user[]|client[]>(this.apiURL+'ByDate/'+\n    new Intl.DateTimeFormat('es-CL').format(initialDate)\n    +'/'+new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  public getSell(id_Sell: number): Observable<sell[]|user[]|client[]> {\n    return this.http.get<sell[]|user[]|client[]>(this.apiURL + '/' + id_Sell);\n  }\n  public getSellByUser(names:string): Observable<sell[]|alert> {\n    return this.http.get<sell[]|alert>(this.apiURL + 'byUser/' +names);\n  }\n  public getSellByClient(names:string): Observable<sell[]|alert> {\n    return this.http.get<sell[]|alert>(this.apiURL + 'byClient/' +names);\n  }\n  \n  public getProductsSell(id_Sell: number): Observable<sell_product[]|alert> {\n    return this.http.get<sell_product[]|alert>(this.apiURL + 'Products/' + id_Sell);\n  }\n  public getProductSell(id_Sell: number,id_product:number): Observable<sell_product[]|alert> {\n    return this.http.get<sell_product[]|alert>(this.apiURL + 'Product/' + id_Sell+'/'+id_product);\n  }\n  public getPaysSell(id_Sell: number): Observable<pay[]|alert> {\n    return this.http.get<pay[]|alert>(this.apiURL + 'Pays/' + id_Sell);\n  }\n  public getPaysByDate(initialDate:Date,endDate:Date,coin:string,type:string): Observable<pay[]|alert> {\n    return this.http.get<pay[]|alert>(this.apiURL + 'PaysByDate/' + \n    new Intl.DateTimeFormat('es-CL').format(initialDate)\n    +'/'+new Intl.DateTimeFormat('es-CL').format(endDate)+'/'+coin+'/'+type);\n  }\n\n  //accedo al backend para crear una nueva caja\n  public setSell(Sell: sell): Observable<alert> {\n    return this.http.post<alert>(this.apiURL, Sell)\n  }\n\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  public updateSell(id_Sell: number, Sell: sell): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + '/' + id_Sell, Sell)\n  }\n  public updateProductsSell(id_Sell: number,id_product:number, Sell_product: sell_product): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + 'Products/' + id_Sell+'/'+id_product, Sell_product)\n  }\n\n   //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  public deleteSell(id_Sell: number): Observable<alert> {\n    return this.http.delete<alert>(this.apiURL + '/' + id_Sell)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}