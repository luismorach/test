{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ComunicatorComponetsService {\n  constructor(http) {\n    this.http = http;\n    this.listData$ = new BehaviorSubject([]);\n    this.state$ = new BehaviorSubject(true);\n    this.titleComponent$ = new BehaviorSubject([]);\n    this.apiURL = 'http://localhost:3000/registers';\n  }\n  setshowHideNavBar(state) {\n    this.state$.next(state);\n  }\n  getShowHideNavBar() {\n    return this.state$.asObservable();\n  }\n  setTitleComponent(title) {\n    this.titleComponent$.next(title);\n  }\n  getTitleComponent() {\n    return this.titleComponent$.asObservable();\n  }\n  setData(data) {\n    this.listData$.next(data);\n  }\n  getData() {\n    return this.listData$.asObservable();\n  }\n  getRegisters() {\n    this.http.get(this.apiURL).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: error => {\n        if (error.error instanceof Error) {\n          console.log('Error cliente o red:', error.error.message);\n        } else {\n          console.log(`Error servidor remoto: ${error.status} # ${error.message}`);\n        }\n      },\n      complete: () => {\n        //inserto la cantidad de paginas al DOM segun la cantidad de datos que tengo\n        //this.createPages(this.tableSearch, this.currentData, this.registers)\n        //Me suscribo al observer para obtener la lista de cajas actuales\n        //Si se filtran los datos, me devolvera las cajas filtradas\n        //si no, me devolvera todas las cajas\n        //this.comunicatorSvc$.getData().subscribe(res => this.currentData = res)\n      }\n    });\n  }\n  getRegister(id_register) {\n    return this.http.get(this.apiURL + '/' + id_register);\n  }\n  setRegister(register) {\n    return this.http.post(this.apiURL, register);\n  }\n  updateRegister(id_register, register) {\n    return this.http.put(this.apiURL + '/' + id_register, register);\n  }\n  deleteRegister(id_register) {\n    return this.http.delete(this.apiURL + '/' + id_register);\n  }\n}\nComunicatorComponetsService.ɵfac = function ComunicatorComponetsService_Factory(t) {\n  return new (t || ComunicatorComponetsService)(i0.ɵɵinject(i1.HttpClient));\n};\nComunicatorComponetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComunicatorComponetsService,\n  factory: ComunicatorComponetsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAA6B,MAAM;;;AAK3D,OAAM,MAAOC,2BAA2B;EAMtCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALhB,cAAS,GAA2B,IAAIH,eAAe,CAAQ,EAAE,CAAC;IAClE,WAAM,GAA6B,IAAIA,eAAe,CAAU,IAAI,CAAC;IACrE,oBAAe,GAA8B,IAAIA,eAAe,CAAW,EAAE,CAAC;IAC9E,WAAM,GAAG,iCAAiC;EAEV;EAEjCI,iBAAiB,CAACC,KAAc;IACrC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EACzB;EAEOG,iBAAiB;IACtB,OAAO,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;EACnC;EAEOC,iBAAiB,CAACC,KAAU;IACjC,IAAI,CAACC,eAAe,CAACL,IAAI,CAACI,KAAK,CAAC;EAClC;EACOE,iBAAiB;IACtB,OAAO,IAAI,CAACD,eAAe,CAACH,YAAY,EAAE;EAC5C;EAEOK,OAAO,CAACC,IAAS;IACtB,IAAI,CAACC,SAAS,CAACT,IAAI,CAACQ,IAAI,CAAC;EAC3B;EACOE,OAAO;IACZ,OAAO,IAAI,CAACD,SAAS,CAACP,YAAY,EAAE;EACtC;EAEOS,YAAY;IACjB,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC,CAACC,SAAS,CAAC;MACnCd,IAAI,EAAEe,GAAG,IAAG;QAAGC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAAA,CAAC;MAChCG,KAAK,EAAGA,KAAwB,IAAI;QAClC,IAAIA,KAAK,CAACA,KAAK,YAAYC,KAAK,EAAE;UAChCH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;SACzD,MAAM;UACLJ,OAAO,CAACC,GAAG,CAAC,0BAA0BC,KAAK,CAACG,MAAM,MAAMH,KAAK,CAC3DE,OAAO,EAAE,CAAC;;MAEhB,CAAC;MACDE,QAAQ,EAAE,MAAK;QACb;QACA;QACA;QACA;QACA;QACA;MAAA;KAEH,CACF;EACD;EACOC,WAAW,CAACC,WAAmB;IAClC,OAAO,IAAI,CAAC5B,IAAI,CAACgB,GAAG,CAAC,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGW,WAAW,CAAC;EACzD;EACOC,WAAW,CAACC,QAAa;IAC9B,OAAO,IAAI,CAAC9B,IAAI,CAAC+B,IAAI,CAAM,IAAI,CAACd,MAAM,EAAEa,QAAQ,CAAC;EACnD;EACOE,cAAc,CAACJ,WAAmB,EAAEE,QAAa;IACtD,OAAO,IAAI,CAAC9B,IAAI,CAACiC,GAAG,CAAM,IAAI,CAAChB,MAAM,GAAG,GAAG,GAAGW,WAAW,EAAEE,QAAQ,CAAC;EACtE;EACOI,cAAc,CAACN,WAAmB;IACvC,OAAO,IAAI,CAAC5B,IAAI,CAACmC,MAAM,CAAC,IAAI,CAAClB,MAAM,GAAG,GAAG,GAAGW,WAAW,CAAC;EAC1D;;AA/DW9B,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;SAA3BA,2BAA2B;EAAAsC,SAA3BtC,2BAA2B;EAAAuC,YAF1B;AAAM","names":["BehaviorSubject","ComunicatorComponetsService","constructor","http","setshowHideNavBar","state","state$","next","getShowHideNavBar","asObservable","setTitleComponent","title","titleComponent$","getTitleComponent","setData","data","listData$","getData","getRegisters","get","apiURL","subscribe","res","console","log","error","Error","message","status","complete","getRegister","id_register","setRegister","register","post","updateRegister","put","deleteRegister","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/services/comunicator/comunicator-componets.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComunicatorComponetsService {\n  private listData$: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  private state$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  private titleComponent$: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\n  private apiURL = 'http://localhost:3000/registers';\n\n  constructor(private http: HttpClient) { }\n\n  public setshowHideNavBar(state: boolean) {\n    this.state$.next(state);\n  }\n\n  public getShowHideNavBar(): Observable<boolean> {\n    return this.state$.asObservable();\n  }\n\n  public setTitleComponent(title: any) {\n    this.titleComponent$.next(title);\n  }\n  public getTitleComponent(): Observable<string[]> {\n    return this.titleComponent$.asObservable();\n  }\n\n  public setData(data: any) {\n    this.listData$.next(data)\n  }\n  public getData() {\n    return this.listData$.asObservable();\n  }\n\n  public getRegisters() {\n    this.http.get(this.apiURL).subscribe({\n      next: res => { console.log(res)},\n      error: (error: HttpErrorResponse) => {\n        if (error.error instanceof Error) {\n          console.log('Error cliente o red:', error.error.message);\n        } else {\n          console.log(`Error servidor remoto: ${error.status} # ${error.\n            message}`);\n        }\n      },\n      complete: () => {\n        //inserto la cantidad de paginas al DOM segun la cantidad de datos que tengo\n        //this.createPages(this.tableSearch, this.currentData, this.registers)\n        //Me suscribo al observer para obtener la lista de cajas actuales\n        //Si se filtran los datos, me devolvera las cajas filtradas\n        //si no, me devolvera todas las cajas\n        //this.comunicatorSvc$.getData().subscribe(res => this.currentData = res)\n      }\n    }\n  );\n  }\n  public getRegister(id_register: number): Observable<any> {\n      return this.http.get(this.apiURL + '/' + id_register);\n  }\n  public setRegister(register: any): Observable<any> {\n    return this.http.post<any>(this.apiURL, register)\n  }\n  public updateRegister(id_register: number, register: any): Observable<any> {\n    return this.http.put<any>(this.apiURL + '/' + id_register, register)\n  }\n  public deleteRegister(id_register: number): Observable<any> {\n    return this.http.delete(this.apiURL + '/' + id_register)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}