{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ComunicatorComponetsService {\n  constructor() {\n    this.state$ = new BehaviorSubject(true);\n    this.itemSelection$ = new Subject();\n  }\n  setshowHideNavBar(state) {\n    this.state$.next(state);\n  }\n  getShowHideNavBar() {\n    return this.state$.asObservable();\n  }\n  setItemSelected(item) {\n    this.itemSelection$.next(item);\n  }\n  getItemSelected() {\n    return this.itemSelection$.asObservable();\n  }\n}\nComunicatorComponetsService.ɵfac = function ComunicatorComponetsService_Factory(t) {\n  return new (t || ComunicatorComponetsService)();\n};\nComunicatorComponetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComunicatorComponetsService,\n  factory: ComunicatorComponetsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAcC,OAAO,QAAQ,MAAM;;AAK3D,OAAM,MAAOC,2BAA2B;EAItCC;IAFQ,WAAM,GAA6B,IAAIH,eAAe,CAAU,IAAI,CAAC;IACrE,mBAAc,GAAoB,IAAIC,OAAO,EAAa;EAClD;EAETG,iBAAiB,CAACC,KAAc;IACrC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EACzB;EAEOG,iBAAiB;IACtB,OAAO,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;EACnC;EAEOC,eAAe,CAACC,IAAc;IACnC,IAAI,CAACC,cAAc,CAACL,IAAI,CAACI,IAAI,CAAC;EAChC;EAEOE,eAAe;IACpB,OAAO,IAAI,CAACD,cAAc,CAACH,YAAY,EAAE;EAC3C;;AApBWP,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;SAA3BA,2BAA2B;EAAAY,SAA3BZ,2BAA2B;EAAAa,YAF1B;AAAM","names":["BehaviorSubject","Subject","ComunicatorComponetsService","constructor","setshowHideNavBar","state","state$","next","getShowHideNavBar","asObservable","setItemSelected","item","itemSelection$","getItemSelected","factory","providedIn"],"sourceRoot":"","sources":["E:\\systems vs code\\app\\src\\app\\services\\comunicator-componets.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComunicatorComponetsService {\n  \n  private state$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  private itemSelection$: Subject<String[]>=new Subject<String []>();\n  constructor() { }\n\n  public setshowHideNavBar(state: boolean) {\n    this.state$.next(state);\n  }\n\n  public getShowHideNavBar(): Observable<boolean> {\n    return this.state$.asObservable();\n  }\n\n  public setItemSelected(item:String []){\n    this.itemSelection$.next(item);\n  }\n\n  public getItemSelected():Observable<String[]>{\n    return this.itemSelection$.asObservable();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}