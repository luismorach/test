{"ast":null,"code":"export class DinamicInput {\n  constructor() {\n    this.elementHasFocus = [];\n    this.positionLabel = [];\n  }\n  isFocused(index, form, label) {\n    this.elementHasFocus[index] = !this.elementHasFocus[index];\n    this.positionLabel[index] = form.get(label)?.value ? false : true;\n  }\n  /*mueve la etiqueta hacia arriba y la letra la vuelve mas pequeña si el  input esta vacio,\n  ademas cambia de color la etiqueta a rojo o verde si la entrada del input es correcta.\n  si el campo no esta vacio solo cambia el color de la etiqueta*/\n  animationLabel(form, input) {\n    let styles;\n    if (form.get(input)?.value || input === 'select') {\n      styles = {\n        \"top\": \"0\",\n        \"font-size\": \"1rem\"\n      };\n    } else {\n      if (form.get(input)?.dirty || form.get(input)?.touched) {\n        if (form.get(input)?.errors) {\n          styles = {\n            \"color\": \"red\"\n          };\n        } else {\n          styles = {\n            \"color\": \"#009688\"\n          };\n        }\n      }\n    }\n    return styles;\n  }\n  animationInput(form, input) {\n    let styles;\n    if (form.get(input)?.dirty || form.get(input)?.touched) {\n      if (form.get(input)?.errors) {\n        styles = {\n          \"background-color\": \"red\"\n        };\n      } else {\n        styles = {\n          \"background-color\": \"#009688\"\n        };\n      }\n    }\n    return styles;\n  }\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,YAAY;EAAzBC;IAEE,oBAAe,GAAc,EAAE;IAC/B,kBAAa,GAAc,EAAE;EAoD/B;EAlDEC,SAAS,CAACC,KAAa,EAAEC,IAAe,EAAEC,KAAa;IACrD,IAAI,CAACC,eAAe,CAACH,KAAK,CAAC,GAAG,CAAC,IAAI,CAACG,eAAe,CAACH,KAAK,CAAC;IAC1D,IAAI,CAACI,aAAa,CAACJ,KAAK,CAAC,GAAGC,IAAI,CAACI,GAAG,CAACH,KAAK,CAAC,EAAEI,KAAK,GAC9C,KAAK,GAAG,IAAI;EAElB;EACA;;;EAGAC,cAAc,CAACN,IAAe,EAAEO,KAAa;IAC3C,IAAIC,MAAe;IACnB,IAAIR,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEF,KAAK,IAAIE,KAAK,KAAK,QAAQ,EAAE;MAChDC,MAAM,GAAG;QACP,KAAK,EAAE,GAAG;QACV,WAAW,EAAE;OACd;KACF,MAAM;MACL,IAAIR,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEE,KAAK,IAAIT,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEG,OAAO,EAAE;QACtD,IAAIV,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEI,MAAM,EAAE;UAC3BH,MAAM,GAAG;YACP,OAAO,EAAE;WACV;SACF,MAAM;UACLA,MAAM,GAAG;YACP,OAAO,EAAE;WACV;;;;IAIP,OAAOA,MAAM;EACf;EACAI,cAAc,CAACZ,IAAe,EAAEO,KAAa;IAC3C,IAAIC,MAAe;IAEnB,IAAIR,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEE,KAAK,IAAIT,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEG,OAAO,EAAE;MACtD,IAAIV,IAAI,CAACI,GAAG,CAACG,KAAK,CAAC,EAAEI,MAAM,EAAE;QAC3BH,MAAM,GAAG;UACP,kBAAkB,EAAE;SACrB;OACF,MAAM;QACLA,MAAM,GAAG;UACP,kBAAkB,EAAE;SACrB;;;IAIL,OAAOA,MAAM;EACf","names":["DinamicInput","constructor","isFocused","index","form","label","elementHasFocus","positionLabel","get","value","animationLabel","input","styles","dirty","touched","errors","animationInput"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/app/src/app/utils/DinamicInput.ts"],"sourcesContent":["import { FormGroup } from \"@angular/forms\";\n\nexport class DinamicInput {\n\n  elementHasFocus: boolean[] = [];\n  positionLabel: boolean[] = [];\n\n  isFocused(index: number, form: FormGroup, label: string) {\n    this.elementHasFocus[index] = !this.elementHasFocus[index];\n    this.positionLabel[index] = form.get(label)?.value\n      ? false : true\n\n  }\n  /*mueve la etiqueta hacia arriba y la letra la vuelve mas pequeña si el  input esta vacio,\n  ademas cambia de color la etiqueta a rojo o verde si la entrada del input es correcta. \n  si el campo no esta vacio solo cambia el color de la etiqueta*/\n  animationLabel(form: FormGroup, input: string,) {\n    let styles!: object;\n    if (form.get(input)?.value || input === 'select') {\n      styles = {\n        \"top\": \"0\",\n        \"font-size\": \"1rem\",\n      }\n    } else {\n      if (form.get(input)?.dirty || form.get(input)?.touched) {\n        if (form.get(input)?.errors) {\n          styles = {\n            \"color\": \"red\"\n          }\n        } else {\n          styles = {\n            \"color\": \"#009688\"\n          }\n        }\n      }\n    }\n    return styles;\n  }\n  animationInput(form: FormGroup, input: string,) {\n    let styles!: object;\n\n    if (form.get(input)?.dirty || form.get(input)?.touched) {\n      if (form.get(input)?.errors) {\n        styles = {\n          \"background-color\": \"red\"\n        }\n      } else {\n        styles = {\n          \"background-color\": \"#009688\"\n        }\n      }\n    }\n\n    return styles;\n  }\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}