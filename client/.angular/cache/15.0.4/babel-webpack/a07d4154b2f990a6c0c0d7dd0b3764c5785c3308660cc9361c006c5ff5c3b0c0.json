{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { DinamicTable } from 'src/app/utils/DinamicTable';\nlet ListaCajasComponent = class ListaCajasComponent extends DinamicTable {\n  constructor(fb, renderer, comunicatorSvc$, routes) {\n    super(renderer);\n    this.fb = fb;\n    this.renderer = renderer;\n    this.comunicatorSvc$ = comunicatorSvc$;\n    this.routes = routes;\n    this.registers = [];\n    this.currentData = [];\n    this.title = [];\n  }\n  ngOnInit() {\n    setTimeout(() => {\n      //Obtengo la ruta actual y la transformo para obtener el titulo del componente\n      let ruta = this.routes.url.slice(this.routes.url.slice(1).indexOf('/') + 2);\n      //Añado el icono del titulo al array\n      this.title.push(\"fas fa-clipboard-list fa-fw\");\n      //Añado el titulo al array\n      this.title.push(decodeURI(ruta).toUpperCase());\n      //Añado el array al observer para que otros componentes se enteren del contenido\n      this.comunicatorSvc$.setTitleComponent(this.title);\n    });\n    //Me suscribo al observer para obtener toda la lista de cajas en mi base de datos\n    this.data$ = this.comunicatorSvc$.getRegisters().subscribe({\n      next: res => {\n        this.currentData = res;\n        this.registers = res;\n      },\n      error: error => {\n        if (error.error instanceof Error) {\n          console.log('Error cliente o red:', error.error.message);\n        } else {\n          console.log(`Error servidor remoto. ${error.status} # ${error.message}`);\n        }\n      },\n      complete: () => {\n        //inserto la cantidad de paginas al DOM segun la cantidad de datos que tengo\n        this.createPages(this.tableSearch, this.currentData, this.registers);\n        //Me suscribo al observer para obtener la lista de cajas actuales\n        //Si se filtran los datos, me devolvera las cajas filtradas\n        //si no, me devolvera todas las cajas\n        this.comunicatorSvc$.getData().subscribe(res => this.currentData = res);\n      }\n    });\n    this.tableSearch = new FormGroup({\n      search: new FormControl(),\n      numberRows: new FormControl('10')\n    });\n  }\n  redirectToUpdate(data) {\n    this.routes.navigate(['/administracion/actualizar caja/' + data.id_register]);\n  }\n  delete(data) {\n    //Obtengo el indice del elemento que voy a eliminar\n    let index = this.registers.indexOf(data);\n    //elimino el elemento de mi lista de cajas totales\n    this.registers.splice(index, 1);\n    //elimino el elemento de mi lista de cajas actuales\n    this.currentData.splice(index, 1);\n    //elimino la fila de mi tabla en la vista\n    this.renderer.removeChild(this.row?.nativeElement, this.row?.nativeElement.children[index]);\n    //elimino la caja de mi base de datos\n    this.comunicatorSvc$.deleteRegister(data.id_register).subscribe({\n      next: res => {\n        console.log(res);\n        this.changeModal(res);\n        console.log(this.popUp?.nativeElement);\n        this.popUp?.nativeElement.showModal();\n      },\n      error: error => {\n        this.changeModal(this.comunicatorSvc$.errorServer(error));\n        this.popUp?.nativeElement.showModal();\n      }\n    });\n    //renderizo la paginacion una vez mas, para que se actualice\n    this.createPages(this.tableSearch, this.currentData, this.registers);\n  }\n  ngOnDestroy() {\n    this.data$.unsubscribe();\n  }\n};\n__decorate([ViewChild('pagination', {\n  static: false\n})], ListaCajasComponent.prototype, \"pagination\", void 0);\n__decorate([ViewChild('next', {\n  static: false\n})], ListaCajasComponent.prototype, \"next\", void 0);\n__decorate([ViewChild('dataTables_info', {\n  static: false\n})], ListaCajasComponent.prototype, \"info\", void 0);\n__decorate([ViewChild('rows', {\n  static: false\n})], ListaCajasComponent.prototype, \"row\", void 0);\n__decorate([ViewChild('popup', {\n  static: true\n})], ListaCajasComponent.prototype, \"popUp\", void 0);\nListaCajasComponent = __decorate([Component({\n  selector: 'app-lista-cajas',\n  templateUrl: './lista-cajas.component.html'\n})], ListaCajasComponent);\nexport { ListaCajasComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormControl","FormGroup","DinamicTable","ListaCajasComponent","constructor","fb","renderer","comunicatorSvc$","routes","ngOnInit","setTimeout","ruta","url","slice","indexOf","title","push","decodeURI","toUpperCase","setTitleComponent","data$","getRegisters","subscribe","next","res","currentData","registers","error","Error","console","log","message","status","complete","createPages","tableSearch","getData","search","numberRows","redirectToUpdate","data","navigate","id_register","delete","index","splice","removeChild","row","nativeElement","children","deleteRegister","changeModal","popUp","showModal","errorServer","ngOnDestroy","unsubscribe","__decorate","static","selector","templateUrl"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/content/administracion/cajas/lista-cajas/lista-cajas.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, ElementRef, Renderer2, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable, Subscription, filter, observable, tap } from 'rxjs';\nimport { register } from 'src/app/interfaces/interfaces';\nimport { TableFilterPipe } from 'src/app/pipes/table-filter.pipe';\nimport { ComunicatorComponetsService } from 'src/app/services/comunicator/comunicator-componets.service';\nimport { DinamicTable } from 'src/app/utils/DinamicTable';\n\n@Component({\n  selector: 'app-lista-cajas',\n  templateUrl: './lista-cajas.component.html'\n})\nexport class ListaCajasComponent extends DinamicTable {\n\n\n  tableSearch!: FormGroup;\n  registers: register[] = [];\n  currentData: register[] = [];\n  data$!: Subscription;\n  title: string[] = [];\n  registerToDelete!:register\n\n  //Elemento donde se insertaran los numeros de paginas para la paginacion\n  @ViewChild('pagination', { static: false }) override pagination?: ElementRef;\n  //Elemento antes del cual se comenzaran a insertar las paginas\n  @ViewChild('next', { static: false }) override next?: ElementRef;\n  //Elemento que muestra la informacion acerca de la cantidad de paginas mostradas, y filtradas\n  @ViewChild('dataTables_info', { static: false }) override info?: ElementRef;\n  //Elemento que tiene todas las filas de la tabla de la vista\n  @ViewChild('rows', { static: false }) row?: ElementRef;\n  @ViewChild('popup', { static: true }) override popUp?: ElementRef;\n\n  constructor(private fb: FormBuilder, public override renderer: Renderer2,\n    private comunicatorSvc$: ComunicatorComponetsService, private routes: Router) {\n    super(renderer)\n  }\n  ngOnInit() {\n    setTimeout(() => {\n      //Obtengo la ruta actual y la transformo para obtener el titulo del componente\n      let ruta = this.routes.url.slice((this.routes.url.slice(1).indexOf('/')) + 2);\n      //Añado el icono del titulo al array\n      this.title.push(\"fas fa-clipboard-list fa-fw\");\n      //Añado el titulo al array\n      this.title.push(decodeURI(ruta).toUpperCase());\n      //Añado el array al observer para que otros componentes se enteren del contenido\n      this.comunicatorSvc$.setTitleComponent(this.title);\n    });\n    //Me suscribo al observer para obtener toda la lista de cajas en mi base de datos\n    this.data$ = this.comunicatorSvc$.getRegisters().subscribe(\n      {\n        next: res => { this.currentData = res; this.registers = res },\n        error: (error: HttpErrorResponse) => {\n          if (error.error instanceof Error) {\n            console.log('Error cliente o red:', error.error.message);\n          } else {\n            console.log(`Error servidor remoto. ${error.status} # ${error.\n              message}`);\n          }\n        },\n        complete: () => {\n          //inserto la cantidad de paginas al DOM segun la cantidad de datos que tengo\n          this.createPages(this.tableSearch, this.currentData, this.registers)\n          //Me suscribo al observer para obtener la lista de cajas actuales\n          //Si se filtran los datos, me devolvera las cajas filtradas\n          //si no, me devolvera todas las cajas\n          this.comunicatorSvc$.getData().subscribe(res => this.currentData = res)\n        }\n      }\n    );\n\n    this.tableSearch = new FormGroup({\n      search: new FormControl(),\n      numberRows: new FormControl('10')\n    });\n  }\n\n  redirectToUpdate(data: register) {\n    this.routes.navigate(['/administracion/actualizar caja/' + data.id_register])\n  }\n  delete(data: register) {\n    //Obtengo el indice del elemento que voy a eliminar\n    let index = this.registers.indexOf(data)\n    //elimino el elemento de mi lista de cajas totales\n    this.registers.splice(index, 1)\n    //elimino el elemento de mi lista de cajas actuales\n    this.currentData.splice(index, 1)\n    //elimino la fila de mi tabla en la vista\n    this.renderer.removeChild(this.row?.nativeElement, this.row?.nativeElement.children[index])\n    //elimino la caja de mi base de datos\n    this.comunicatorSvc$.deleteRegister(data.id_register).subscribe({\n      next: res => {\n        console.log(res)\n        this.changeModal(res);\n        console.log(this.popUp?.nativeElement)\n        this.popUp?.nativeElement.showModal();\n      },\n      error: (error: HttpErrorResponse) => {\n        this.changeModal(this.comunicatorSvc$.errorServer(error))\n        this.popUp?.nativeElement.showModal()\n      }\n    })\n    //renderizo la paginacion una vez mas, para que se actualice\n    this.createPages(this.tableSearch, this.currentData, this.registers)\n  }\n  ngOnDestroy() {\n    this.data$.unsubscribe();\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}