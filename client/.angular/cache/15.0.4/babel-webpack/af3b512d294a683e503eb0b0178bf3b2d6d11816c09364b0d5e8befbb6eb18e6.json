{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ComunicatorComponetsService {\n  constructor() {\n    this.listData$ = new BehaviorSubject([]);\n    this.state$ = new BehaviorSubject(true);\n    this.titleComponent$ = new BehaviorSubject([]);\n  }\n  setshowHideNavBar(state) {\n    this.state$.next(state);\n  }\n  getShowHideNavBar() {\n    return this.state$.asObservable();\n  }\n  setTitleComponent(title) {\n    this.titleComponent$.next(title);\n  }\n  getTitleComponent() {\n    return this.titleComponent$.asObservable();\n  }\n  setData(data) {\n    this.listData$.next(data);\n  }\n  getData() {\n    return this.listData$.asObservable();\n  }\n  errorServer(error) {\n    let content;\n    if (error.error instanceof Error) {\n      content = 'Error cliente o red:' + error.error.message;\n    } else {\n      content = 'Error en el servidor remoto:' + error.message;\n    }\n    let values = {\n      icon: 'fa-regular fa-circle-xmark',\n      title: 'Ocurrió un error inesperado',\n      content: content\n    };\n    return values;\n  }\n  converterToMainCoin(value, exchange) {\n    return value * exchange;\n  }\n  converterToSecondaryCoin(value, exchange) {\n    return Number((value / exchange).toFixed(2));\n  }\n  converter(value, coin) {\n    let valueConverted = 0;\n    if (coin.type === 'principal') {\n      valueConverted = value * coin.exchange;\n    } else {\n      console.log(coin);\n      valueConverted = value / coin.exchange;\n    }\n    return valueConverted;\n  }\n}\nComunicatorComponetsService.ɵfac = function ComunicatorComponetsService_Factory(t) {\n  return new (t || ComunicatorComponetsService)();\n};\nComunicatorComponetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComunicatorComponetsService,\n  factory: ComunicatorComponetsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAA6B,MAAM;;AAM3D,OAAM,MAAOC,2BAA2B;EAKtCC;IAJQ,cAAS,GAA2B,IAAIF,eAAe,CAAQ,EAAE,CAAC;IAClE,WAAM,GAA6B,IAAIA,eAAe,CAAU,IAAI,CAAC;IACrE,oBAAe,GAA8B,IAAIA,eAAe,CAAW,EAAE,CAAC;EAEtE;EAETG,iBAAiB,CAACC,KAAc;IACrC,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EACzB;EAEOG,iBAAiB;IACtB,OAAO,IAAI,CAACF,MAAM,CAACG,YAAY,EAAE;EACnC;EAEOC,iBAAiB,CAACC,KAAU;IACjC,IAAI,CAACC,eAAe,CAACL,IAAI,CAACI,KAAK,CAAC;EAClC;EACOE,iBAAiB;IACtB,OAAO,IAAI,CAACD,eAAe,CAACH,YAAY,EAAE;EAC5C;EAEOK,OAAO,CAACC,IAAS;IACtB,IAAI,CAACC,SAAS,CAACT,IAAI,CAACQ,IAAI,CAAC;EAC3B;EACOE,OAAO;IACZ,OAAO,IAAI,CAACD,SAAS,CAACP,YAAY,EAAE;EACtC;EACOS,WAAW,CAACC,KAAwB;IACzC,IAAIC,OAAc;IAClB,IAAID,KAAK,CAACA,KAAK,YAAYE,KAAK,EAAE;MAChCD,OAAO,GAAC,sBAAsB,GAAED,KAAK,CAACA,KAAK,CAACG,OAAO;KACpD,MAAM;MACLF,OAAO,GAAC,8BAA8B,GAAED,KAAK,CAAEG,OAAO;;IAExD,IAAIC,MAAM,GAAC;MACTC,IAAI,EAAC,4BAA4B;MACjCb,KAAK,EAAC,6BAA6B;MACnCS,OAAO,EAACA;KACT;IAED,OAAOG,MAAM;EACf;EACAE,mBAAmB,CAACC,KAAY,EAACC,QAAe;IAC9C,OAAOD,KAAK,GAACC,QAAQ;EACvB;EACAC,wBAAwB,CAACF,KAAY,EAACC,QAAe;IACnD,OAAOE,MAAM,CAAC,CAACH,KAAK,GAACC,QAAQ,EAAEG,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5C;EACAC,SAAS,CAACL,KAAY,EAACM,IAAS;IAC9B,IAAIC,cAAc,GAAC,CAAC;IACpB,IAAGD,IAAI,CAACE,IAAI,KAAG,WAAW,EAAC;MAC1BD,cAAc,GAAEP,KAAK,GAACM,IAAI,CAACL,QAAQ;KACnC,MAAI;MACHQ,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MAClBC,cAAc,GAAEP,KAAK,GAACM,IAAI,CAACL,QAAQ;;IAEpC,OAAOM,cAAc;EACvB;;AA1DW/B,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;SAA3BA,2BAA2B;EAAAmC,SAA3BnC,2BAA2B;EAAAoC,YAF1B;AAAM","names":["BehaviorSubject","ComunicatorComponetsService","constructor","setshowHideNavBar","state","state$","next","getShowHideNavBar","asObservable","setTitleComponent","title","titleComponent$","getTitleComponent","setData","data","listData$","getData","errorServer","error","content","Error","message","values","icon","converterToMainCoin","value","exchange","converterToSecondaryCoin","Number","toFixed","converter","coin","valueConverted","type","console","log","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/services/comunicator/comunicator-componets.service.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { coin } from 'src/app/interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComunicatorComponetsService {\n  private listData$: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  private state$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n  private titleComponent$: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\n\n  constructor() { }\n\n  public setshowHideNavBar(state: boolean) {\n    this.state$.next(state);\n  }\n\n  public getShowHideNavBar(): Observable<boolean> {\n    return this.state$.asObservable();\n  }\n\n  public setTitleComponent(title: any) {\n    this.titleComponent$.next(title);\n  }\n  public getTitleComponent(): Observable<string[]> {\n    return this.titleComponent$.asObservable();\n  }\n\n  public setData(data: any) {\n    this.listData$.next(data)\n  }\n  public getData() {\n    return this.listData$.asObservable();\n  }\n  public errorServer(error: HttpErrorResponse) {\n    let content:string\n    if (error.error instanceof Error) {\n      content='Error cliente o red:'+ error.error.message\n    } else {\n      content='Error en el servidor remoto:'+ error. message\n    }\n    let values={\n      icon:'fa-regular fa-circle-xmark',\n      title:'Ocurrió un error inesperado',\n      content:content\n    }\n    \n    return values\n  }\n  converterToMainCoin(value:number,exchange:number){\n    return value*exchange\n  }\n  converterToSecondaryCoin(value:number,exchange:number){\n    return Number((value/exchange).toFixed(2))\n  }\n  converter(value:number,coin:coin){\n    let valueConverted=0\n    if(coin.type==='principal'){\n     valueConverted= value*coin.exchange\n    }else{\n      console.log(coin)\n     valueConverted= value/coin.exchange\n    }\n    return valueConverted\n  }\n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}