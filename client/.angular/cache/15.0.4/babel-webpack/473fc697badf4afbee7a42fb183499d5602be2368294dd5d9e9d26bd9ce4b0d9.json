{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DevolucionesService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:3000/repayments';\n  }\n  //accedo al backend para obtener datos de todas las cajas\n  getRepayments() {\n    return this.http.get(this.apiURL);\n  }\n  getRepaymentsBydate(initialDate, endDate) {\n    return this.http.get(this.apiURL + '/' + new Intl.DateTimeFormat('es-CL').format(initialDate) + '/' + new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  getRepayment(id_repayment) {\n    return this.http.get(this.apiURL + '/' + id_repayment);\n  }\n  getRepaymentsBuy(id_buy) {\n    return this.http.get(this.apiURL + 'Buy/' + id_buy);\n  }\n  getRepaymentsSell(id_sell) {\n    return this.http.get(this.apiURL + 'Sell/' + id_sell);\n  }\n  getRepaymentByUser(names) {\n    return this.http.get(this.apiURL + 'ByUser/' + names);\n  }\n  getRepaymentByType(names) {\n    return this.http.get(this.apiURL + 'ByType/' + names);\n  }\n  //accedo al backend para crear una nueva caja\n  setRepaymentBuy(repayment) {\n    return this.http.post(this.apiURL + 'Buy', repayment);\n  }\n  setRepaymentSell(repayment) {\n    return this.http.post(this.apiURL + 'Sell', repayment);\n  }\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  updateRepayment(id_repayment, repayment) {\n    return this.http.put(this.apiURL + '/' + id_repayment, repayment);\n  }\n  //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  deleteRepayment(id_repayment) {\n    return this.http.delete(this.apiURL + '/' + id_repayment);\n  }\n}\nDevolucionesService.ɵfac = function DevolucionesService_Factory(t) {\n  return new (t || DevolucionesService)(i0.ɵɵinject(i1.HttpClient));\n};\nDevolucionesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DevolucionesService,\n  factory: DevolucionesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,kCAAkC;EACX;EAExC;EACOC,aAAa;IAClB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,CAAC;EAChD;EACOC,mBAAmB,CAACC,WAAgB,EAACC,OAAY;IACtD,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,GAAC,GAAG,GAAC,IAAII,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,GACrG,GAAG,GAAC,IAAIE,IAAI,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,MAAM,CAACH,OAAO,CAAC,CAAC;EACxD;EACA;EACOI,YAAY,CAACC,YAAoB;IACtC,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAoB,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGQ,YAAY,CAAC;EAC3E;EACOC,gBAAgB,CAACC,MAAc;IACpC,OAAO,IAAI,CAACb,IAAI,CAACE,GAAG,CAAoB,IAAI,CAACC,MAAM,GAAG,MAAM,GAAGU,MAAM,CAAC;EACxE;EACOC,iBAAiB,CAACC,OAAe;IACtC,OAAO,IAAI,CAACf,IAAI,CAACE,GAAG,CAAoB,IAAI,CAACC,MAAM,GAAG,OAAO,GAAGY,OAAO,CAAC;EAC1E;EACOC,kBAAkB,CAACC,KAAY;IACpC,OAAO,IAAI,CAACjB,IAAI,CAACE,GAAG,CAAoB,IAAI,CAACC,MAAM,GAAG,SAAS,GAAEc,KAAK,CAAC;EACzE;EACOC,kBAAkB,CAACD,KAAY;IACpC,OAAO,IAAI,CAACjB,IAAI,CAACE,GAAG,CAAoB,IAAI,CAACC,MAAM,GAAG,SAAS,GAAEc,KAAK,CAAC;EACzE;EAEE;EACKE,eAAe,CAACC,SAAoB;IACzC,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CAAQ,IAAI,CAAClB,MAAM,GAAC,KAAK,EAAEiB,SAAS,CAAC;EAC5D;EACOE,gBAAgB,CAACF,SAAoB;IAC1C,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CAAQ,IAAI,CAAClB,MAAM,GAAC,MAAM,EAAEiB,SAAS,CAAC;EAC7D;EAEA;EACOG,eAAe,CAACZ,YAAoB,EAAES,SAAoB;IAC/D,OAAO,IAAI,CAACpB,IAAI,CAACwB,GAAG,CAAQ,IAAI,CAACrB,MAAM,GAAG,GAAG,GAAGQ,YAAY,EAAES,SAAS,CAAC;EAC1E;EAEC;EACMK,eAAe,CAACd,YAAoB;IACzC,OAAO,IAAI,CAACX,IAAI,CAAC0B,MAAM,CAAQ,IAAI,CAACvB,MAAM,GAAG,GAAG,GAAGQ,YAAY,CAAC;EAClE;;AA9CWb,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAA6B,SAAnB7B,mBAAmB;EAAA8B,YAFlB;AAAM","names":["DevolucionesService","constructor","http","getRepayments","get","apiURL","getRepaymentsBydate","initialDate","endDate","Intl","DateTimeFormat","format","getRepayment","id_repayment","getRepaymentsBuy","id_buy","getRepaymentsSell","id_sell","getRepaymentByUser","names","getRepaymentByType","setRepaymentBuy","repayment","post","setRepaymentSell","updateRepayment","put","deleteRepayment","delete","factory","providedIn"],"sourceRoot":"","sources":["/media/luis/Nuevo vol/systems vs code/test/client/src/app/administrador/content/devoluciones/service/devoluciones.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { repayment,alert } from 'src/app/interfaces/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DevolucionesService {\n\n  private apiURL = 'http://localhost:3000/repayments';\n  constructor(private http: HttpClient) { }\n\n  //accedo al backend para obtener datos de todas las cajas\n  public getRepayments(): Observable<repayment[]> {\n    return this.http.get<repayment[]>(this.apiURL);\n  }\n  public getRepaymentsBydate(initialDate:Date,endDate:Date): Observable<repayment[]> {\n    return this.http.get<repayment[]>(this.apiURL+'/'+new Intl.DateTimeFormat('es-CL').format(initialDate)\n    +'/'+new Intl.DateTimeFormat('es-CL').format(endDate));\n  }\n  //accedo al backend para obtener datos de la caja cuyo id se pasa como parametro\n  public getRepayment(id_repayment: number): Observable<repayment[]|alert> {\n    return this.http.get<repayment[]|alert>(this.apiURL + '/' + id_repayment);\n  }\n  public getRepaymentsBuy(id_buy: number): Observable<repayment[]|alert> {\n    return this.http.get<repayment[]|alert>(this.apiURL + 'Buy/' + id_buy);\n  }\n  public getRepaymentsSell(id_sell: number): Observable<repayment[]|alert> {\n    return this.http.get<repayment[]|alert>(this.apiURL + 'Sell/' + id_sell);\n  }\n  public getRepaymentByUser(names:string): Observable<repayment[]|alert> {\n    return this.http.get<repayment[]|alert>(this.apiURL + 'ByUser/' +names);\n  }\n  public getRepaymentByType(names:string): Observable<repayment[]|alert> {\n    return this.http.get<repayment[]|alert>(this.apiURL + 'ByType/' +names);\n  }\n \n    //accedo al backend para crear una nueva caja\n  public setRepaymentBuy(repayment: repayment): Observable<alert> {\n    return this.http.post<alert>(this.apiURL+'Buy', repayment)\n  }\n  public setRepaymentSell(repayment: repayment): Observable<alert> {\n    return this.http.post<alert>(this.apiURL+'Sell', repayment)\n  }\n\n  //accedo al backend para actualizar datos de la caja cuyo id se pasa como parametro\n  public updateRepayment(id_repayment: number, repayment: repayment): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + '/' + id_repayment, repayment)\n  }\n\n   //accedo al backend para eliminar la caja cuyo id se pasa como parametro\n  public deleteRepayment(id_repayment: number): Observable<alert> {\n    return this.http.delete<alert>(this.apiURL + '/' + id_repayment)\n  }\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}