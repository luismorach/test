{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProveedoresService {\n  constructor(http) {\n    this.http = http;\n    this.apiURL = 'http://localhost:3000/providers';\n  }\n  //accedo al backend para obtener datos de todas las proveedores\n  getProviders() {\n    return this.http.get(this.apiURL);\n  }\n  //accedo al backend para obtener datos de la proveedor cuyo id se pasa como parametro\n  getProvider(id_provider) {\n    return this.http.get(this.apiURL + '/' + id_provider);\n  }\n  //accedo al backend para crear un nueva proveedor\n  setProvider(provider) {\n    return this.http.post(this.apiURL, provider);\n  }\n  //accedo al backend para actualizar datos del proveedor cuyo id se pasa como parametro\n  updateProvider(id_provider, provider) {\n    return this.http.put(this.apiURL + '/' + id_provider, provider);\n  }\n  //accedo al backend para eliminar el proveedor cuyo id se pasa como parametro\n  deleteProvider(id_provider) {\n    return this.http.delete(this.apiURL + '/' + id_provider);\n  }\n}\nProveedoresService.ɵfac = function ProveedoresService_Factory(t) {\n  return new (t || ProveedoresService)(i0.ɵɵinject(i1.HttpClient));\n};\nProveedoresService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProveedoresService,\n  factory: ProveedoresService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,kBAAkB;EAI7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,iCAAiC;EACV;EAExC;EACOC,YAAY;IACjB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,IAAI,CAACC,MAAM,CAAC;EAC/C;EAEA;EACOC,WAAW,CAACC,WAAmB;IACpC,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAmB,IAAI,CAACC,MAAM,GAAG,GAAG,GAAGE,WAAW,CAAC;EACzE;EAEA;EACOC,WAAW,CAACC,QAAkB;IACnC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAQ,IAAI,CAACL,MAAM,EAAEI,QAAQ,CAAC;EACrD;EAEA;EACOE,cAAc,CAACJ,WAAmB,EAAEE,QAAkB;IAC3D,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAQ,IAAI,CAACP,MAAM,GAAG,GAAG,GAAGE,WAAW,EAAEE,QAAQ,CAAC;EACxE;EAEC;EACMI,cAAc,CAACN,WAAmB;IACvC,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAQ,IAAI,CAACT,MAAM,GAAG,GAAG,GAAGE,WAAW,CAAC;EACjE;;AA7BWP,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAe,SAAlBf,kBAAkB;EAAAgB,YAFjB;AAAM","names":["ProveedoresService","constructor","http","getProviders","get","apiURL","getProvider","id_provider","setProvider","provider","post","updateProvider","put","deleteProvider","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/administrador/content/administracion/proveedores/service/proveedores.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { provider,alert } from 'src/app/interfaces/interfaces';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProveedoresService {\n\n  \n  private apiURL = 'http://localhost:3000/providers';\n  constructor(private http: HttpClient) { }\n\n  //accedo al backend para obtener datos de todas las proveedores\n  public getProviders(): Observable<provider[]> {\n    return this.http.get<provider[]>(this.apiURL);\n  }\n\n  //accedo al backend para obtener datos de la proveedor cuyo id se pasa como parametro\n  public getProvider(id_provider: number): Observable<provider[]|alert> {\n    return this.http.get<provider[]|alert>(this.apiURL + '/' + id_provider);\n  }\n\n  //accedo al backend para crear un nueva proveedor\n  public setProvider(provider: provider): Observable<alert> {\n    return this.http.post<alert>(this.apiURL, provider)\n  }\n\n  //accedo al backend para actualizar datos del proveedor cuyo id se pasa como parametro\n  public updateProvider(id_provider: number, provider: provider): Observable<alert> {\n    return this.http.put<alert>(this.apiURL + '/' + id_provider, provider)\n  }\n\n   //accedo al backend para eliminar el proveedor cuyo id se pasa como parametro\n  public deleteProvider(id_provider: number): Observable<alert> {\n    return this.http.delete<alert>(this.apiURL + '/' + id_provider)\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}