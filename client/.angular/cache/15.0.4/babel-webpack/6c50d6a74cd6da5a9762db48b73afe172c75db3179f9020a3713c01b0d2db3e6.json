{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { tap } from 'rxjs';\nimport { DinamicInput } from 'src/app/utils/DinamicInput';\nlet NuevaCajaComponent = class NuevaCajaComponent extends DinamicInput {\n  constructor(fb, comunicatorSvc, routes) {\n    super();\n    this.fb = fb;\n    this.comunicatorSvc = comunicatorSvc;\n    this.routes = routes;\n    this.usedClass = [];\n    this.title = [];\n    this.usedClass[0] = \"input-on-focus\";\n  }\n  ngOnInit() {\n    setTimeout(() => {\n      /* Obtengo la ruta actual y la transformo para obtener el titulo del componente*/\n      let ruta = this.routes.url.slice(this.routes.url.slice(1).indexOf('/') + 2);\n      this.title.push(decodeURI(ruta).toUpperCase()); //a単ado el titulo al array\n      if (ruta.indexOf(\"actualizar\")) {\n        this.title.push(\"fa-solid fa-cash-register fa-fw\"); //aa単ado el icono del titulo al array\n      } else {\n        this.title.push(\"fa fa-arrows-rotate\");\n      }\n      this.comunicatorSvc.setTitleComponent(this.title);\n    });\n    this.newRegister = this.fb.group({\n      name: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]),\n      state: new FormControl('Habilitada')\n    });\n  }\n  submit() {\n    if (this.newRegister.valid) {\n      this.comunicatorSvc.setRegister(this.newRegister.value).pipe(tap(res => console.log(res))).subscribe();\n      console.log(this.newRegister.value);\n    }\n  }\n  clean() {\n    this.newRegister.get('name')?.setValue('');\n  }\n};\nNuevaCajaComponent = __decorate([Component({\n  selector: 'app-nueva-caja',\n  templateUrl: './nueva-caja.component.html',\n  styleUrls: ['./nueva-caja.component.css']\n})], NuevaCajaComponent);\nexport { NuevaCajaComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAsBC,WAAW,EAAaC,UAAU,QAAQ,gBAAgB;AAEhF,SAASC,GAAG,QAAQ,MAAM;AAE1B,SAASC,YAAY,QAAQ,4BAA4B;AAQlD,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAmB,SAAQD,YAAY;EAKlDE,YAAoBC,EAAe,EAAUC,cAA2C,EAC9EC,MAAc;IACtB,KAAK,EAAE;IAFW,OAAE,GAAFF,EAAE;IAAuB,mBAAc,GAAdC,cAAc;IACjD,WAAM,GAANC,MAAM;IAHhB,cAAS,GAAa,EAAE;IACxB,UAAK,GAAa,EAAE;IAIlB,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,GAAG,gBAAgB;EACtC;EAEAC,QAAQ;IACNC,UAAU,CAAC,MAAK;MACd;MACA,IAAIC,IAAI,GAAG,IAAI,CAACJ,MAAM,CAACK,GAAG,CAACC,KAAK,CAAE,IAAI,CAACN,MAAM,CAACK,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;MAC7E,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAACO,WAAW,EAAE,CAAC,CAAC;MAC/C,IAAIP,IAAI,CAACG,OAAO,CAAC,YAAY,CAAC,EAAE;QAC9B,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,iCAAiC,CAAC,CAAC;OACpD,MAAM;QACL,IAAI,CAACD,KAAK,CAACC,IAAI,CAAC,qBAAqB,CAAC;;MAExC,IAAI,CAACV,cAAc,CAACa,iBAAiB,CAAC,IAAI,CAACJ,KAAK,CAAC;IACnD,CAAC,CAAC;IACF,IAAI,CAACK,WAAW,GAAG,IAAI,CAACf,EAAE,CAACgB,KAAK,CAAC;MAC/BC,IAAI,EAAE,IAAIvB,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACuB,QAAQ,EAAEvB,UAAU,CAACwB,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;MACpFC,KAAK,EAAE,IAAI1B,WAAW,CAAC,YAAY;KACpC,CAAC;EAEJ;EAEA2B,MAAM;IACJ,IAAI,IAAI,CAACN,WAAW,CAACO,KAAK,EAAE;MAC1B,IAAI,CAACrB,cAAc,CAACsB,WAAW,CAAC,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC,CAACC,IAAI,CAC1D7B,GAAG,CAAC8B,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC,CAC7B,CAACG,SAAS,EAAE;MACbF,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,WAAW,CAACS,KAAK,CAAC;;EAEvC;EACAM,KAAK;IACH,IAAI,CAACf,WAAW,CAACgB,GAAG,CAAC,MAAM,CAAC,EAAEC,QAAQ,CAAC,EAAE,CAAC;EAC5C;CACD;AAzCYlC,kBAAkB,eAN9BL,SAAS,CAAC;EACTwC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GAEWrC,kBAAkB,CAyC9B;SAzCYA,kBAAkB","names":["Component","FormControl","Validators","tap","DinamicInput","NuevaCajaComponent","constructor","fb","comunicatorSvc","routes","usedClass","ngOnInit","setTimeout","ruta","url","slice","indexOf","title","push","decodeURI","toUpperCase","setTitleComponent","newRegister","group","name","required","pattern","state","submit","valid","setRegister","value","pipe","res","console","log","subscribe","clean","get","setValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/luis/Documentos/systems vs code/inventary-system/client/src/app/content/administracion/cajas/nueva-caja/nueva-caja.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs';\nimport { ComunicatorComponetsService } from 'src/app/services/comunicator/comunicator-componets.service';\nimport { DinamicInput } from 'src/app/utils/DinamicInput';\n\n@Component({\n  selector: 'app-nueva-caja',\n  templateUrl: './nueva-caja.component.html',\n  styleUrls: ['./nueva-caja.component.css']\n})\n\nexport class NuevaCajaComponent extends DinamicInput {\n\n  newRegister!: FormGroup;\n  usedClass: string[] = [];\n  title: string[] = []\n  constructor(private fb: FormBuilder, private comunicatorSvc: ComunicatorComponetsService,\n    private routes: Router) {\n    super();\n    this.usedClass[0] = \"input-on-focus\";\n  }\n\n  ngOnInit() {\n    setTimeout(() => {\n      /* Obtengo la ruta actual y la transformo para obtener el titulo del componente*/\n      let ruta = this.routes.url.slice((this.routes.url.slice(1).indexOf('/')) + 2);\n      this.title.push(decodeURI(ruta).toUpperCase());//a単ado el titulo al array\n      if (ruta.indexOf(\"actualizar\")) {\n        this.title.push(\"fa-solid fa-cash-register fa-fw\");//aa単ado el icono del titulo al array\n      } else {\n        this.title.push(\"fa fa-arrows-rotate\");\n      }\n      this.comunicatorSvc.setTitleComponent(this.title);\n    });\n    this.newRegister = this.fb.group({\n      name: new FormControl('', [Validators.required, Validators.pattern(/^[a-zA-Z ]+$/)]),\n      state: new FormControl('Habilitada')\n    })\n\n  }\n\n  submit() {\n    if (this.newRegister.valid) {\n      this.comunicatorSvc.setRegister(this.newRegister.value).pipe(\n        tap(res => console.log(res))\n      ).subscribe()\n      console.log(this.newRegister.value)\n    }\n  }\n  clean() {\n    this.newRegister.get('name')?.setValue('');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}